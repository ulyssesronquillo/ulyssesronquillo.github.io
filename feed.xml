<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-02-11T22:34:35+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">uly.me</title><subtitle></subtitle><entry><title type="html">oh my posh</title><link href="http://0.0.0.0:4000/linux/2024/02/11/oh-my-posh.html" rel="alternate" type="text/html" title="oh my posh" /><published>2024-02-11T00:00:00+00:00</published><updated>2024-02-11T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/11/oh-my-posh</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/11/oh-my-posh.html"><![CDATA[<p>If you are too tired of your Terminal’s default prompt, give this custom prompt engine program called <a href="https://ohmyposh.dev/">Oh My Posh</a> a try. It doesn’t matter which shell you are using whether you are using bash in Linux or zsh on a Mac, you can style it to your own liking. You’ll just have to learn a little bit of the custom oh-my-posh syntax, but it’s really not difficult to figure out once you get rolling. Browse several of the themes they have available on their site to get some ideas. To help you decide which palette of colors to choose from, head over to <a href="https://www.canva.com/colors/color-palette-generator/">Canva.com</a> website and use the color combination they recommended. If you are curious, here’s my <a href="https://gist.github.com/ulyssesronquillo/d66cfea9a266692e40f4aa19b06ccf9c">prompt</a> setup if you are interested in checking it out.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="custom" /><category term="prompt" /><category term="style" /><summary type="html"><![CDATA[If you are too tired of your Terminal’s default prompt, give this custom prompt engine program called Oh My Posh a try. It doesn’t matter which shell you are using whether you are using bash in Linux or zsh on a Mac, you can style it to your own liking. You’ll just have to learn a little bit of the custom oh-my-posh syntax, but it’s really not difficult to figure out once you get rolling. Browse several of the themes they have available on their site to get some ideas. To help you decide which palette of colors to choose from, head over to Canva.com website and use the color combination they recommended. If you are curious, here’s my prompt setup if you are interested in checking it out.]]></summary></entry><entry><title type="html">jump start power supply</title><link href="http://0.0.0.0:4000/misc/2024/02/06/jump-start-power-supply.html" rel="alternate" type="text/html" title="jump start power supply" /><published>2024-02-06T00:00:00+00:00</published><updated>2024-02-06T00:00:00+00:00</updated><id>http://0.0.0.0:4000/misc/2024/02/06/jump-start-power-supply</id><content type="html" xml:base="http://0.0.0.0:4000/misc/2024/02/06/jump-start-power-supply.html"><![CDATA[<p>A week ago, I was messing around with my motherboard trying to fix my RGB lights so that the RGB lights can all be controlled from one controller. I accidentally short-circuited something on the motherboard. The computer kept running to my suprise, but immediately after powering down the system, the computer would no longer power up. I thought I had fried my power supply. Worse, I may have fried the motherboard. Then I searched online and <a href="https://www.silverstonetek.com/upload/downloads/QA/PSU/PSU-Paper%20Clip-EN.pdf">came across this trick</a> to jump start the power supply. It was worth a try at this point in time. One, it was the cheapeast option. Frankly, I couldn’t tell what was preventing the system from powering up, either the power supply or the motherboard. It’s one or the other. So, the trick calls for getting a small paper clip and then removing the 24 pin connector from the motherboard, powering on the system and then placing the paper clip on pins 4 and 5. Pin 4 is the green wire. Pin 5 is the black wire. So I gave it a try. Sure enough the power supply turned on like the articles mentioned. The fans and the LED lights turned on. I turned off the power supply and reconnected the 24 pin cable back on the motherboard. There had been no problems ever since. Who knew a paper clip can jump start a power supply. Nice little trick. It saved me a few dollars.</p>]]></content><author><name>ulysses</name></author><category term="misc" /><category term="jump" /><category term="start" /><category term="power" /><category term="supply" /><summary type="html"><![CDATA[A week ago, I was messing around with my motherboard trying to fix my RGB lights so that the RGB lights can all be controlled from one controller. I accidentally short-circuited something on the motherboard. The computer kept running to my suprise, but immediately after powering down the system, the computer would no longer power up. I thought I had fried my power supply. Worse, I may have fried the motherboard. Then I searched online and came across this trick to jump start the power supply. It was worth a try at this point in time. One, it was the cheapeast option. Frankly, I couldn’t tell what was preventing the system from powering up, either the power supply or the motherboard. It’s one or the other. So, the trick calls for getting a small paper clip and then removing the 24 pin connector from the motherboard, powering on the system and then placing the paper clip on pins 4 and 5. Pin 4 is the green wire. Pin 5 is the black wire. So I gave it a try. Sure enough the power supply turned on like the articles mentioned. The fans and the LED lights turned on. I turned off the power supply and reconnected the 24 pin cable back on the motherboard. There had been no problems ever since. Who knew a paper clip can jump start a power supply. Nice little trick. It saved me a few dollars.]]></summary></entry><entry><title type="html">supportconfig options</title><link href="http://0.0.0.0:4000/linux/2024/02/06/supportconfig-options.html" rel="alternate" type="text/html" title="supportconfig options" /><published>2024-02-06T00:00:00+00:00</published><updated>2024-02-06T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/06/supportconfig-options</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/06/supportconfig-options.html"><![CDATA[<p>I ran supportconfig on a system the other day and it took all night. I gave up and killed it.</p>

<p>So, here are a few options that you can try to speed things up.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>supportconfig -o OFILES,CRASH,FILES,PROC,NFS,LDAP,SSSD
</code></pre></div></div>
<p>Hope that helps.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="suse" /><category term="sles" /><category term="supportconfig" /><summary type="html"><![CDATA[I ran supportconfig on a system the other day and it took all night. I gave up and killed it.]]></summary></entry><entry><title type="html">gcp create hyperdisks</title><link href="http://0.0.0.0:4000/cloud/2024/02/05/gcp-create-hyperdisks.html" rel="alternate" type="text/html" title="gcp create hyperdisks" /><published>2024-02-05T00:00:00+00:00</published><updated>2024-02-05T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2024/02/05/gcp-create-hyperdisks</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2024/02/05/gcp-create-hyperdisks.html"><![CDATA[<p>GCP has new generation of disks for demanding and mission-critical applications. Hyperdisks is not available on all VMs, but they are usually available on large machine types. You create a Hyperdisk from scratch and attach it to an existing VM or convert a current disk by way of a snapshot. Here’s the script to convert it an existing disk to Hyperdisk from a snapshot.</p>

<p>There are 3 types of Hyperdisks</p>

<ol>
  <li>Hyperdisk Balanced</li>
  <li>Hyperdisk Extreme</li>
  <li>Hyperdisk Throughput</li>
</ol>

<p>Convert from snapshot.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute disks create $disk \
  --source-snapshot="$snap" \
  --type="hyperdisk-extreme" \
  --zone="$zone" \
  --project="$project"
</code></pre></div></div>

<p>Or create a new one.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute disks create $disk \
   --zone="$zone" \
   --size=100 \
   --type="hyperdisk-extreme" \
   --project="$project" 
</code></pre></div></div>

<p>IOPS and Throughput are optional values. You can let GCP decide the default or override it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   --provisioned-iops=IOPS_LIMIT
   --provisioned-throughput=THROUGHPUT_LIMIT
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcp" /><category term="create" /><category term="hyperdisk" /><summary type="html"><![CDATA[GCP has new generation of disks for demanding and mission-critical applications. Hyperdisks is not available on all VMs, but they are usually available on large machine types. You create a Hyperdisk from scratch and attach it to an existing VM or convert a current disk by way of a snapshot. Here’s the script to convert it an existing disk to Hyperdisk from a snapshot.]]></summary></entry><entry><title type="html">display ip addresses</title><link href="http://0.0.0.0:4000/linux/2024/02/04/display-ip-addresses.html" rel="alternate" type="text/html" title="display ip addresses" /><published>2024-02-04T00:00:00+00:00</published><updated>2024-02-04T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/04/display-ip-addresses</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/04/display-ip-addresses.html"><![CDATA[<p>Here’s a little script to display my internal and external IP addresses.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

main() {

  my_int_ip=$(ip addr show enp4s0 | grep -w 'inet' | awk '{print $2}')
  my_ext_ip=$(curl -s -4 ifconfig.me)

  echo 'External IP: ' $my_ext_ip 
  echo 'Internal IP: ' $my_int_ip

}

main
</code></pre></div></div>

<p>Output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>External IP: xxx.xxx.xxx.xxx
Internal IP: 192.168.0.100
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="display" /><category term="ip" /><category term="addresses" /><category term="internal" /><category term="external" /><summary type="html"><![CDATA[Here’s a little script to display my internal and external IP addresses.]]></summary></entry><entry><title type="html">openwrt</title><link href="http://0.0.0.0:4000/linux/2024/02/04/openwrt.html" rel="alternate" type="text/html" title="openwrt" /><published>2024-02-04T00:00:00+00:00</published><updated>2024-02-04T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/04/openwrt</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/04/openwrt.html"><![CDATA[<p>My Ubiquiti router stopped working several months ago after many years of working almost flawlessly. I replaced it with an older Linksys E4200 router that I found in a plastic container in in the garage. The Linksys router has been stable, but it’s showing its age. It was released back in January of 2011. I thought about replacing my router with another Ubiquiti, but I can’t complain since the Linksys E4200 is working just fine. The other night I upgraded and changed the firmware and installed OpenWrt, an open-source firmware based on a Linux operating system that runs on many older routers. OpenWrt gives my router extensibility by providing features that you typically find only on high-end devices. It also gives me higher security since there are many added features. Firmware updates are published regularly which you’ll never receive on older routers since many hardware manufacturers no longer support their old routers. Performance is much better. Stability is another plus. And most of all, the price is right. OpenWrt is free. If you want to give an old router some life, give OpenWrt a try. By the way, you can get an old E4200 router in eBay for $15.00.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="router" /><category term="openwrt" /><category term="linksys" /><category term="e4200" /><summary type="html"><![CDATA[My Ubiquiti router stopped working several months ago after many years of working almost flawlessly. I replaced it with an older Linksys E4200 router that I found in a plastic container in in the garage. The Linksys router has been stable, but it’s showing its age. It was released back in January of 2011. I thought about replacing my router with another Ubiquiti, but I can’t complain since the Linksys E4200 is working just fine. The other night I upgraded and changed the firmware and installed OpenWrt, an open-source firmware based on a Linux operating system that runs on many older routers. OpenWrt gives my router extensibility by providing features that you typically find only on high-end devices. It also gives me higher security since there are many added features. Firmware updates are published regularly which you’ll never receive on older routers since many hardware manufacturers no longer support their old routers. Performance is much better. Stability is another plus. And most of all, the price is right. OpenWrt is free. If you want to give an old router some life, give OpenWrt a try. By the way, you can get an old E4200 router in eBay for $15.00.]]></summary></entry><entry><title type="html">display dashes across screen</title><link href="http://0.0.0.0:4000/linux/2024/01/23/display-dashes-across-screen.html" rel="alternate" type="text/html" title="display dashes across screen" /><published>2024-01-23T00:00:00+00:00</published><updated>2024-01-23T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/23/display-dashes-across-screen</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/23/display-dashes-across-screen.html"><![CDATA[<p>Here’s the traditional way of displaying a list of dashes across the screen.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "===================="
</code></pre></div></div>

<p>Here’s the short cut.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>printf -- '=%.s' {1..20}; echo
</code></pre></div></div>

<p>Explanation:</p>

<ul>
  <li>first I’m using printf instead of echo. printf is a little bit better when it comes to formatting.</li>
  <li>The – option tells printf to ignore the rest of the remaining arguments so it renders properly.</li>
  <li>The character before the % percentage is the one being repeated. In this case, we are repeating “=.”</li>
  <li>1-20 is the number of times the character before the % percentage is repeated.</li>
</ul>

<p>That’s it.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="print" /><category term="echo" /><category term="dashes" /><category term="across" /><category term="screen" /><category term="multiple" /><summary type="html"><![CDATA[Here’s the traditional way of displaying a list of dashes across the screen.]]></summary></entry><entry><title type="html">gcp check login</title><link href="http://0.0.0.0:4000/cloud/2024/01/22/gcp-check-login.html" rel="alternate" type="text/html" title="gcp check login" /><published>2024-01-22T00:00:00+00:00</published><updated>2024-01-22T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2024/01/22/gcp-check-login</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2024/01/22/gcp-check-login.html"><![CDATA[<p>If you are running a gcloud commands, it will be good to know if a user is still logged in. In some corporate settings, authentication is set to time out after a number of hours. The following lines of code checks if a user is still loggedin and displays a message to reauthenticate if logged out. In reality the script runs a list of GCP projects, but limits the output to just one line. The output is sent to a file. If the first line is equal to “Reauthentication required.”, then there’s a message telling the user to login again.  If the first line has an error, it means the user is not logged in. It also tells the user to login again. Here’s the code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checkLogin() {

    gcloud projects list --format="value[](name)" --limit 1 &gt; reauth.txt 2&gt;&amp;1
    ok=$(cat reauth.txt | head -n 1)
    
    if [[ "$ok" == "Reauthentication required." ]]; then 
        echo "You're not logged in to Google SDK. Please login, then try again."
        exit
    elif [[ "$ok" =~ "ERROR" ]]; then
        echo "You're not logged in to Google SDK. Please login, then try again."
        exit
    fi

    rm -f reauth.txt

}
</code></pre></div></div>

<p>Just call it at the top of the script.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checkLogin
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcp" /><category term="check" /><category term="login" /><category term="auth" /><summary type="html"><![CDATA[If you are running a gcloud commands, it will be good to know if a user is still logged in. In some corporate settings, authentication is set to time out after a number of hours. The following lines of code checks if a user is still loggedin and displays a message to reauthenticate if logged out. In reality the script runs a list of GCP projects, but limits the output to just one line. The output is sent to a file. If the first line is equal to “Reauthentication required.”, then there’s a message telling the user to login again. If the first line has an error, it means the user is not logged in. It also tells the user to login again. Here’s the code.]]></summary></entry><entry><title type="html">date and title</title><link href="http://0.0.0.0:4000/linux/2024/01/20/date-and-title.html" rel="alternate" type="text/html" title="date and title" /><published>2024-01-20T00:00:00+00:00</published><updated>2024-01-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/20/date-and-title</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/20/date-and-title.html"><![CDATA[<p>Previously, I was showing both dates and titles on the main index page. Here’s the date format if I’ll ever need it again.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{{ post.date | date: "%Y-%m-%d" }}
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="jekyll" /><category term="display" /><category term="date" /><category term="title" /><summary type="html"><![CDATA[Previously, I was showing both dates and titles on the main index page. Here’s the date format if I’ll ever need it again.]]></summary></entry><entry><title type="html">display markdown code</title><link href="http://0.0.0.0:4000/2024/01/20/display-markdown-code.html" rel="alternate" type="text/html" title="display markdown code" /><published>2024-01-20T00:00:00+00:00</published><updated>2024-01-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/01/20/display-markdown-code</id><content type="html" xml:base="http://0.0.0.0:4000/2024/01/20/display-markdown-code.html"><![CDATA[<p>One of the nuances in working with Jekyll is dealing with markdown language. The challenge is how to display markdown code within a post to show off your work without Jekyll interpreting it. After a few searches, I found a cool little trick that will make the markdown language visible in your code section of the post. The key is to use raw bracketing between your code as displayed below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{{% raw %}}
{{ post.date | date: "%Y-%m-%d" }}
{{% endraw %}}
</code></pre></div></div>

<p>That’s the trick!</p>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[One of the nuances in working with Jekyll is dealing with markdown language. The challenge is how to display markdown code within a post to show off your work without Jekyll interpreting it. After a few searches, I found a cool little trick that will make the markdown language visible in your code section of the post. The key is to use raw bracketing between your code as displayed below.]]></summary></entry></feed>