<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-02-03T05:01:50+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">uly.me</title><subtitle></subtitle><entry><title type="html">display dashes across screen</title><link href="http://0.0.0.0:4000/linux/2024/01/23/display-dashes-across-screen.html" rel="alternate" type="text/html" title="display dashes across screen" /><published>2024-01-23T00:00:00+00:00</published><updated>2024-01-23T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/23/display-dashes-across-screen</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/23/display-dashes-across-screen.html"><![CDATA[<p>Here’s the traditional way of displaying a list of dashes across the screen.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "===================="
</code></pre></div></div>

<p>Here’s the short cut.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>printf -- '=%.s' {1..20}; echo
</code></pre></div></div>

<p>Explanation:</p>

<ul>
  <li>first I’m using printf instead of echo. printf is a little bit better when it comes to formatting.</li>
  <li>The – option tells printf to ignore the rest of the remaining arguments so it renders properly.</li>
  <li>The character before the % percentage is the one being repeated. In this case, we are repeating “=.”</li>
  <li>1-20 is the number of times the character before the % percentage is repeated.</li>
</ul>

<p>That’s it.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="print" /><category term="echo" /><category term="dashes" /><category term="across" /><category term="screen" /><category term="multiple" /><summary type="html"><![CDATA[Here’s the traditional way of displaying a list of dashes across the screen.]]></summary></entry><entry><title type="html">gcp check login</title><link href="http://0.0.0.0:4000/cloud/2024/01/22/gcp-check-login.html" rel="alternate" type="text/html" title="gcp check login" /><published>2024-01-22T00:00:00+00:00</published><updated>2024-01-22T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2024/01/22/gcp-check-login</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2024/01/22/gcp-check-login.html"><![CDATA[<p>If you are running a gcloud commands, it will be good to know if a user is still logged in. In some corporate settings, authentication is set to time out after a number of hours. The following lines of code checks if a user is still loggedin and displays a message to reauthenticate if logged out. In reality the script runs a list of GCP projects, but limits the output to just one line. The output is sent to a file. If the first line is equal to “Reauthentication required.”, then there’s a message telling the user to login again.  If the first line has an error, it means the user is not logged in. It also tells the user to login again. Here’s the code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checkLogin() {

    gcloud projects list --format="value[](name)" --limit 1 &gt; reauth.txt 2&gt;&amp;1
    ok=$(cat reauth.txt | head -n 1)
    
    if [[ "$ok" == "Reauthentication required." ]]; then 
        echo "You're not logged in to Google SDK. Please login, then try again."
        exit
    elif [[ "$ok" =~ "ERROR" ]]; then
        echo "You're not logged in to Google SDK. Please login, then try again."
        exit
    fi

    rm -f reauth.txt

}
</code></pre></div></div>

<p>Just call it at the top of the script.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checkLogin
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcp" /><category term="check" /><category term="login" /><category term="auth" /><summary type="html"><![CDATA[If you are running a gcloud commands, it will be good to know if a user is still logged in. In some corporate settings, authentication is set to time out after a number of hours. The following lines of code checks if a user is still loggedin and displays a message to reauthenticate if logged out. In reality the script runs a list of GCP projects, but limits the output to just one line. The output is sent to a file. If the first line is equal to “Reauthentication required.”, then there’s a message telling the user to login again. If the first line has an error, it means the user is not logged in. It also tells the user to login again. Here’s the code.]]></summary></entry><entry><title type="html">date and title</title><link href="http://0.0.0.0:4000/linux/2024/01/20/date-and-title.html" rel="alternate" type="text/html" title="date and title" /><published>2024-01-20T00:00:00+00:00</published><updated>2024-01-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/20/date-and-title</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/20/date-and-title.html"><![CDATA[<p>Previously, I was showing both dates and titles on the main index page. Here’s the date format if I’ll ever need it again.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{{ post.date | date: "%Y-%m-%d" }}
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="jekyll" /><category term="display" /><category term="date" /><category term="title" /><summary type="html"><![CDATA[Previously, I was showing both dates and titles on the main index page. Here’s the date format if I’ll ever need it again.]]></summary></entry><entry><title type="html">display markdown code</title><link href="http://0.0.0.0:4000/2024/01/20/display-markdown-code.html" rel="alternate" type="text/html" title="display markdown code" /><published>2024-01-20T00:00:00+00:00</published><updated>2024-01-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/01/20/display-markdown-code</id><content type="html" xml:base="http://0.0.0.0:4000/2024/01/20/display-markdown-code.html"><![CDATA[<p>One of the nuances in working with Jekyll is dealing with markdown language. The challenge is how to display markdown code within a post to show off your work without Jekyll interpreting it. After a few searches, I found a cool little trick that will make the markdown language visible in your code section of the post. The key is to use raw bracketing between your code as displayed below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{{% raw %}}
{{ post.date | date: "%Y-%m-%d" }}
{{% endraw %}}
</code></pre></div></div>

<p>That’s the trick!</p>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[One of the nuances in working with Jekyll is dealing with markdown language. The challenge is how to display markdown code within a post to show off your work without Jekyll interpreting it. After a few searches, I found a cool little trick that will make the markdown language visible in your code section of the post. The key is to use raw bracketing between your code as displayed below.]]></summary></entry><entry><title type="html">vim navigation commands</title><link href="http://0.0.0.0:4000/linux/2024/01/17/vim-navigation-commands.html" rel="alternate" type="text/html" title="vim navigation commands" /><published>2024-01-17T00:00:00+00:00</published><updated>2024-01-17T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/17/vim-navigation-commands</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/17/vim-navigation-commands.html"><![CDATA[<p>Vim is a terminal editor in Linux, Mac and Windows system if it’s installed. To be really efficient in using vim, you’ll need to master a few very important keystrokes. So, here’s a list of common vim keystrokes that can improve your vim experience.</p>

<p>Cursor movement</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>h - move cursor left 
l - move cursor right
k - move cursor up
j - move cursor down

H - move cursor to top of screen
M - move cursor to middle of screen
L - move cursor to bottom of screen

w - jump forward to the start of a word 
e - jump forward to the end of a word
b - jump backwards to the start of a word 

0 - jump to the start of the line
$ - jump to the end of the line 

gg - go to the first line of the document 
G - go the last line of the decoment
</code></pre></div></div>

<p>Insert mode</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i - insert before cursor
I - insert at the beginning of the line 
a - insert after the cursor
A - insert at the end of the line 
</code></pre></div></div>

<p>To get a list of vim keystrokes, here’s a good list of <a href="https://vim.rtorr.com/">shortcuts</a>. Enjoy.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="vim" /><category term="navigation" /><category term="common" /><category term="commands" /><category term="keystrokes" /><summary type="html"><![CDATA[Vim is a terminal editor in Linux, Mac and Windows system if it’s installed. To be really efficient in using vim, you’ll need to master a few very important keystrokes. So, here’s a list of common vim keystrokes that can improve your vim experience.]]></summary></entry><entry><title type="html">gcloud vm alias ip</title><link href="http://0.0.0.0:4000/cloud/2024/01/13/gcloud-vm-alias-ip.html" rel="alternate" type="text/html" title="gcloud vm alias ip" /><published>2024-01-13T00:00:00+00:00</published><updated>2024-01-13T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2024/01/13/gcloud-vm-alias-ip</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2024/01/13/gcloud-vm-alias-ip.html"><![CDATA[<p>In my <a href="/cloud/2024/01/12/terraform-gcp-vm-alias-ip.html">previous post</a>, I’ve provisioned a vm with an alias ip using terraform. In this post, I will do the same but will use gcloud commands.</p>

<p>First, let’s reserve an internal ip address.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute addresses create host-alias-ip \
--addresses 10.10.10.10
--region us-central1 \
--subnet projects/projectid/regions/us-central1/subnetworks/subnet-us-central1 \
--project projectid
</code></pre></div></div>

<p>To allocate automatically, leave out –addresses.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute addresses create host-alias-ip \
--region us-central1 \
--subnet projects/projectid/regions/us-central1/subnetworks/subnet-us-central1 \
--project projectid
</code></pre></div></div>

<p>To check reservations, list all in the project.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute addresses list --project projectid
</code></pre></div></div>

<p>Attach an alias ip to a vm instance.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute instances network-interfaces update hostname \
--aliases 10.10.10.10 \
--zone us-central1-c \
--project projectid
</code></pre></div></div>

<p>To detach leave aliases blank.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute instances network-interfaces update hostname \
--aliases "" \
--zone us-central1-c \
--project projectid
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcloud" /><category term="vm" /><category term="ip" /><category term="alias" /><summary type="html"><![CDATA[In my previous post, I’ve provisioned a vm with an alias ip using terraform. In this post, I will do the same but will use gcloud commands.]]></summary></entry><entry><title type="html">terraform gcp vm alias ip</title><link href="http://0.0.0.0:4000/cloud/2024/01/12/terraform-gcp-vm-alias-ip.html" rel="alternate" type="text/html" title="terraform gcp vm alias ip" /><published>2024-01-12T00:00:00+00:00</published><updated>2024-01-12T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2024/01/12/terraform-gcp-vm-alias-ip</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2024/01/12/terraform-gcp-vm-alias-ip.html"><![CDATA[<p>How to build a VM in GCP with a secondary alias IP. Assuming that you already have a compute and a local block in your Terraform file.</p>

<p>Go to the locals block and add the local variables you’ll need.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>locals {
  project          = "projectId"
  hostname         = "yourhostname"
}
</code></pre></div></div>

<p>Reserve an internal ip address by adding the <strong>google_compute_address</strong> block to your Terraform file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource "google_compute_address" "alias-ip" {
  name = "${local.hostname}-alias-ip"
  region = "us-central1"
  address_type = "INTERNAL"
  subnetwork = local.subnetwork
}
</code></pre></div></div>

<p>Inside your existing compute instance block, add the <strong>alias_ip_range</strong> to the network interface block.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  network_interface {
    network    = local.network
    subnetwork = local.subnetwork
    alias_ip_range {
      ip_cidr_range = google_compute_address.alias-ip.address
    }    
  }
</code></pre></div></div>

<p>The script will reserve an internal ip address and attach it the vm as an alias ip.</p>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcp" /><category term="vm" /><category term="alias" /><category term="ip" /><summary type="html"><![CDATA[How to build a VM in GCP with a secondary alias IP. Assuming that you already have a compute and a local block in your Terraform file.]]></summary></entry><entry><title type="html">install xrdp</title><link href="http://0.0.0.0:4000/linux/2024/01/11/install-xrdp.html" rel="alternate" type="text/html" title="install xrdp" /><published>2024-01-11T00:00:00+00:00</published><updated>2024-01-11T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/11/install-xrdp</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/11/install-xrdp.html"><![CDATA[<p>xrdp is a package that allows another desktop to connect to another using the rdp desktop software.</p>

<p>Install xrdp on the target desktop.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install xrdp
</code></pre></div></div>

<p>Add a second user since you can’t use the default user. Use -m to create a home directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo useradd -m john
</code></pre></div></div>

<p>Give new user sudo access. This is optional, but is nice to have if running root commands.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo usermod -a -G sudo john
</code></pre></div></div>

<p>Set the user’s password.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo passwd john
</code></pre></div></div>

<p>You can now connect from a rdp client to your desktop using username john.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="install" /><category term="xrdp" /><category term="remote" /><category term="desktop" /><summary type="html"><![CDATA[xrdp is a package that allows another desktop to connect to another using the rdp desktop software.]]></summary></entry><entry><title type="html">jekyll target blank</title><link href="http://0.0.0.0:4000/linux/2024/01/11/jekyll-target-blank.html" rel="alternate" type="text/html" title="jekyll target blank" /><published>2024-01-11T00:00:00+00:00</published><updated>2024-01-11T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/11/jekyll-target-blank</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/11/jekyll-target-blank.html"><![CDATA[<p>I found a really nice gem that sets all external links to open to a new tab. It’s called jekyll-target-blank. To add, just run the following.</p>

<p>Edit Gemfile and add this line.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'jekyll-target-blank'
</code></pre></div></div>

<p>Edit the _config.yml file and add this line.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins:
  - jekyll-target-blank
</code></pre></div></div>

<p>Run bundle install.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle install
</code></pre></div></div>

<p>Because I’m running Jekyll in a docker container, I had to restart it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose stop
docker-compose up -d
</code></pre></div></div>

<p>Check your external links. They should open up to a new tab.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="jekyll" /><category term="link" /><category term="target" /><category term="blank" /><summary type="html"><![CDATA[I found a really nice gem that sets all external links to open to a new tab. It’s called jekyll-target-blank. To add, just run the following.]]></summary></entry><entry><title type="html">scp multiple files</title><link href="http://0.0.0.0:4000/linux/2024/01/09/scp-multiple-files.html" rel="alternate" type="text/html" title="scp multiple files" /><published>2024-01-09T00:00:00+00:00</published><updated>2024-01-09T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/01/09/scp-multiple-files</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/01/09/scp-multiple-files.html"><![CDATA[<p>scp is an excellent utility for copying files to and from a server without the need for running a ftp server or some sort of file transfer service on the server. scp uses your existing ssh access to copy files to and from a server. You will need permissions to the remote server otherwise scp copy will fail. Whether pulling down a file or pushing a file to a server, scp can be invoked from a client regardless of file direction. You can copy a single file or multiple files. The examples below demonstrate this.</p>

<p>scp copy a single file to a server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp file.ext username@server:/home/homedir/
</code></pre></div></div>

<p>scp copy multiple local files to a server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp file1.ext file2.ext file3.ext username@server:/home/homedir/
</code></pre></div></div>

<p>scp copy a single file from a server to the desktop.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp username@server:/home/homedir/file.ext .
</code></pre></div></div>

<p>scp copy multiple files from a server to the desktop.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp username@server:/home/homedir/*.{txt,doc} . 
</code></pre></div></div>

<p>Here’s a script that I wrote to upload multiple files to a server. It looks for text and php files in the current directory and then uploads them to the server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
# create temp file
temp="temp"
&gt;$temp
# loop through selected files in the current directory
for file in *.{txt,php}; do
    # put all files in one row
    echo -n "$file " &gt;&gt; $temp 
done
# add new line at the end
echo "" &gt;&gt; $temp
# assign the list to a variable called $files
files=$(cat $temp)
# scp the files to the cloudreporting server
scp $files username@server:/home/homedir
# delete temp file
rm -f $temp
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="scp" /><category term="multiple" /><category term="files" /><summary type="html"><![CDATA[scp is an excellent utility for copying files to and from a server without the need for running a ftp server or some sort of file transfer service on the server. scp uses your existing ssh access to copy files to and from a server. You will need permissions to the remote server otherwise scp copy will fail. Whether pulling down a file or pushing a file to a server, scp can be invoked from a client regardless of file direction. You can copy a single file or multiple files. The examples below demonstrate this.]]></summary></entry></feed>