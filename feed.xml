<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2023-12-16T05:17:48+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">uly.me</title><subtitle></subtitle><entry><title type="html">PHP can not run gcloud commands via shell_exec</title><link href="http://0.0.0.0:4000/cloud/2023/12/15/php-cant-run-gcloud-via-shell-exec.html" rel="alternate" type="text/html" title="PHP can not run gcloud commands via shell_exec" /><published>2023-12-15T00:00:00+00:00</published><updated>2023-12-15T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2023/12/15/php-cant-run-gcloud-via-shell-exec</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2023/12/15/php-cant-run-gcloud-via-shell-exec.html"><![CDATA[<p>I ran into an issue with PHP calling gcloud commands via shell_exec. It turned out to be a permission issue.</p>

<p>I ended up giving the <strong>apache</strong> user access to <strong>/usr/share/httpd/.config</strong> directory which was missing.</p>

<p>The gcloud SDK needs write access to this directory. I ran the commands below. It worked after.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir /usr/share/httpd/.config
chown apache:root /usr/share/httpd/.config
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="Cloud" /><category term="php" /><category term="shell_exec" /><category term="permissions" /><category term="config" /><summary type="html"><![CDATA[I ran into an issue with PHP calling gcloud commands via shell_exec. It turned out to be a permission issue.]]></summary></entry><entry><title type="html">Hiding Passwords Using OpenSSL</title><link href="http://0.0.0.0:4000/linux/2023/10/31/hiding-passwords-using-openssl.html" rel="alternate" type="text/html" title="Hiding Passwords Using OpenSSL" /><published>2023-10-31T17:06:54+00:00</published><updated>2023-10-31T17:06:54+00:00</updated><id>http://0.0.0.0:4000/linux/2023/10/31/hiding-passwords-using-openssl</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/10/31/hiding-passwords-using-openssl.html"><![CDATA[<p>How to hide main password on Linux using OpenSSL.</p>

<p>Run this on a web server once.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "SecretPassword" | openssl enc -aes-256-cbc -md sha512 -a -salt -pass pass:NotSoSecretPassword &gt; secret.txt  
$ chmod 600 secret.txt
</code></pre></div></div>

<p>On client machine, download the secret file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl https://webserver/some/dir/secret.txt --output -s secret.txt
</code></pre></div></div>

<p>To retrieve the secret password, run the code below. For added measure, delete secret.txt file afterwards.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat secret.txt | openssl enc -aes-256-cbc -md sha512 -a -d -salt -pass pass:NotSoSecretPassword
$rm -f secret.txt
</code></pre></div></div>

<p>In addition, you can rotate the NotSoSecretPassword to make it more secure.</p>]]></content><author><name>Ulysses</name></author><category term="Linux" /><category term="hide" /><category term="obfuscate" /><category term="openssl" /><category term="password" /><summary type="html"><![CDATA[How to hide main password on Linux using OpenSSL.]]></summary></entry><entry><title type="html">Install Latest Terraform via Homebrew</title><link href="http://0.0.0.0:4000/linux/2023/10/27/install-latest-terraform-via-homebrew.html" rel="alternate" type="text/html" title="Install Latest Terraform via Homebrew" /><published>2023-10-27T14:40:49+00:00</published><updated>2023-10-27T14:40:49+00:00</updated><id>http://0.0.0.0:4000/linux/2023/10/27/install-latest-terraform-via-homebrew</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/10/27/install-latest-terraform-via-homebrew.html"><![CDATA[<p>As of this writing, the latest Terraform version supported by Homebrew is version 1.5.7. It’s a bit outdated considering the latest Terraform version is 1.6.2. To force Homebrew to install the latest version of Terraform, run the following commands from your MacOS Terminal. But prior to that, check your version first.</p>

<p>Check current version</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ terraform --version
Terraform v1.5.7
on darwin_amd64
</code></pre></div></div>

<p>Upgrade Terraform</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ brew tap hashicorp/tap
$ brew install hashicorp/tap/terraform
</code></pre></div></div>

<p>Check version again</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ terraform --version
Terraform v1.6.2
on darwin_amd64
</code></pre></div></div>

<p>That’s it.</p>]]></content><author><name>Ulysses</name></author><category term="Linux" /><category term="homebrew" /><category term="install" /><category term="latest" /><category term="terraform" /><summary type="html"><![CDATA[As of this writing, the latest Terraform version supported by Homebrew is version 1.5.7. It’s a bit outdated considering the latest Terraform version is 1.6.2. To force Homebrew to install the latest version of Terraform, run the following commands from your MacOS Terminal. But prior to that, check your version first.]]></summary></entry><entry><title type="html">YouTube Thumbnail</title><link href="http://0.0.0.0:4000/linux/2023/10/26/youtube-thumbnail.html" rel="alternate" type="text/html" title="YouTube Thumbnail" /><published>2023-10-26T18:40:51+00:00</published><updated>2023-10-26T18:40:51+00:00</updated><id>http://0.0.0.0:4000/linux/2023/10/26/youtube-thumbnail</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/10/26/youtube-thumbnail.html"><![CDATA[<p>When uploading videos, Youtube gives you an option to upload your own thumbnails. If you want to use your own pics, you can format them to 1280×720 pixels and use it as a thumbnail. The script below will resize any image regardless of the original size to 1280×720 pixels using the convert utility of ImageMagick. The conversion may crop the edges of your image if it’s not 16:9 or 1.777 format. The script will also resize an image in portrait format.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
cd /home/ulysses/Pictures/jpg
image=$1
test=`convert $image -format "%[fx:(w/h&gt;1)?1:0]" info:`
if [ $test -eq 1 ]; then
    convert $image -resize 1280x720! 720_$image
else
    convert $image -resize 720x1280! 720_$image
fi
</code></pre></div></div>

<p>Enjoy.</p>]]></content><author><name>Ulysses</name></author><category term="Linux" /><category term="convert" /><category term="imagemagick" /><category term="thumbnail" /><category term="upload" /><category term="youtube" /><summary type="html"><![CDATA[When uploading videos, Youtube gives you an option to upload your own thumbnails. If you want to use your own pics, you can format them to 1280×720 pixels and use it as a thumbnail. The script below will resize any image regardless of the original size to 1280×720 pixels using the convert utility of ImageMagick. The conversion may crop the edges of your image if it’s not 16:9 or 1.777 format. The script will also resize an image in portrait format.]]></summary></entry><entry><title type="html">Search Second Column for Characters</title><link href="http://0.0.0.0:4000/linux/2023/10/24/search-second-column-for-characters.html" rel="alternate" type="text/html" title="Search Second Column for Characters" /><published>2023-10-24T19:42:05+00:00</published><updated>2023-10-24T19:42:05+00:00</updated><id>http://0.0.0.0:4000/linux/2023/10/24/search-second-column-for-characters</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/10/24/search-second-column-for-characters.html"><![CDATA[<p>How to search the second column for string starting with.</p>

<p>Here are the contents of results.txt.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>John 10
Mario 12
Derek 15
Mark 20
Matt 25
</code></pre></div></div>

<p>Display only individuals that are older than 20 using awk.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>awk '$2 ~ /^20/' results.txt
</code></pre></div></div>

<p>Result.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mark 20
Matt 25
</code></pre></div></div>

<p>You can easily adjust this to other columns.</p>]]></content><author><name>Ulysses</name></author><category term="Linux" /><category term="awk" /><category term="bash" /><category term="column" /><category term="display" /><category term="search" /><category term="second" /><summary type="html"><![CDATA[How to search the second column for string starting with.]]></summary></entry><entry><title type="html">Lambda Function List EC2 Instances</title><link href="http://0.0.0.0:4000/cloud/2023/10/18/lambda-function-list-ec2-instances.html" rel="alternate" type="text/html" title="Lambda Function List EC2 Instances" /><published>2023-10-18T20:26:19+00:00</published><updated>2023-10-18T20:26:19+00:00</updated><id>http://0.0.0.0:4000/cloud/2023/10/18/lambda-function-list-ec2-instances</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2023/10/18/lambda-function-list-ec2-instances.html"><![CDATA[<p>This is a Lambda function code that list EC2 instances from multiple regions and write the output to a S3 bucket.</p>

<p>Include name and IP address on the output.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import boto3
import json
import os
from botocore.exceptions import NoCredentialsError

# Set the AWS regions you want to query
regions = ['us-east-1', 'us-west-2', 'eu-west-1']

# Set the S3 bucket and object key for storing the output
s3_bucket = 'your-s3-bucket-name'
s3_object_key = 'ec2-instances-list.txt'

def lambda_handler(event, context):
    ec2_instances = []

    for region in regions:
        try:
            # Create an EC2 client for the specified region
            ec2 = boto3.client('ec2', region_name=region)

            # Describe EC2 instances in the region
            response = ec2.describe_instances()

            for reservation in response['Reservations']:
                for instance in reservation['Instances']:
                    # Extract instance information
                    instance_name = "N/A"
                    instance_ip = "N/A"
                    for tag in instance.get('Tags', []):
                        if tag['Key'] == 'Name':
                            instance_name = tag['Value']
                    if instance.get('PublicIpAddress'):
                        instance_ip = instance['PublicIpAddress']

                    ec2_instances.append(f"Region: {region}, Name: {instance_name}, IP: {instance_ip}")

        except NoCredentialsError:
            return "No AWS credentials found."

    # Store the EC2 instance information in an S3 object
    s3 = boto3.client('s3')
    s3.put_object(Bucket=s3_bucket, Key=s3_object_key, Body='\n'.join(ec2_instances), ContentType='text/plain')

    return {
        "statusCode": 200,
        "body": json.dumps("EC2 instance information has been saved to S3.")
    }
</code></pre></div></div>]]></content><author><name>Ulysses</name></author><category term="Cloud" /><category term="bucket" /><category term="ec2" /><category term="instances" /><category term="lambda" /><category term="list" /><category term="python" /><category term="s3" /><summary type="html"><![CDATA[This is a Lambda function code that list EC2 instances from multiple regions and write the output to a S3 bucket.]]></summary></entry><entry><title type="html">Alternative to JQ</title><link href="http://0.0.0.0:4000/cloud/linux/2023/10/18/alternative-to-jq.html" rel="alternate" type="text/html" title="Alternative to JQ" /><published>2023-10-18T11:50:33+00:00</published><updated>2023-10-18T11:50:33+00:00</updated><id>http://0.0.0.0:4000/cloud/linux/2023/10/18/alternative-to-jq</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/linux/2023/10/18/alternative-to-jq.html"><![CDATA[<p>If you don’t have JQ (JSON Parser) installed, you can use a combination of echo, grep and sed to pull out the data.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># create new credentials
new_access_keys_json=$(aws iam create-access-key --user-name $user --profile $profile)
new_access_key_id=$(echo "$new_access_keys_json" | grep -o '"AccessKeyId": "[^"]*' | sed 's/"AccessKeyId": "//')
new_access_secret_key=$(echo "$new_access_keys_json" | grep -o '"SecretAccessKey": "[^"]*' | sed 's/"SecretAccessKey": "//')
</code></pre></div></div>

<p>In this example, we are creating new AWS IAM credentials. AccessKeyID and secretKey are extracted from JSON.</p>]]></content><author><name>Ulysses</name></author><category term="Cloud" /><category term="Linux" /><category term="alternative" /><category term="aws" /><category term="grep" /><category term="jq" /><category term="json" /><category term="parser" /><category term="sed" /><summary type="html"><![CDATA[If you don’t have JQ (JSON Parser) installed, you can use a combination of echo, grep and sed to pull out the data.]]></summary></entry><entry><title type="html">Bash Split A String With Delimiter</title><link href="http://0.0.0.0:4000/linux/2023/09/18/bash-split-a-string-with-delimiter.html" rel="alternate" type="text/html" title="Bash Split A String With Delimiter" /><published>2023-09-18T22:33:33+00:00</published><updated>2023-09-18T22:33:33+00:00</updated><id>http://0.0.0.0:4000/linux/2023/09/18/bash-split-a-string-with-delimiter</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/09/18/bash-split-a-string-with-delimiter.html"><![CDATA[<p>Here’s how to split a string that contains a delimeter.</p>

<p>String</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server-boot;server-data
</code></pre></div></div>

<p>Split the string and print on every line.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data="server-boot;server-data"
for i in $(echo $data | tr ";" "\n"); do
  echo $i
done
</code></pre></div></div>

<p>Result</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server-boot
server-data
</code></pre></div></div>

<p>Send output to a file</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>file="output.txt"
&gt; $file
data="server-boot;server-data"
for i in $(echo $data | tr ";" "\n"); do
  echo $i &gt;&gt; $file
done
</code></pre></div></div>]]></content><author><name>Ulysses</name></author><category term="Linux" /><category term="bash" /><category term="delimeter" /><category term="lines" /><category term="multiple" /><category term="output" /><category term="split" /><category term="string" /><summary type="html"><![CDATA[Here’s how to split a string that contains a delimeter.]]></summary></entry><entry><title type="html">Gcloud Table vs CSV Format</title><link href="http://0.0.0.0:4000/cloud/2023/09/18/gcloud-table-vs-csv-format.html" rel="alternate" type="text/html" title="Gcloud Table vs CSV Format" /><published>2023-09-18T20:36:45+00:00</published><updated>2023-09-18T20:36:45+00:00</updated><id>http://0.0.0.0:4000/cloud/2023/09/18/gcloud-table-vs-csv-format</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2023/09/18/gcloud-table-vs-csv-format.html"><![CDATA[<p>Differences using gcloud table vs CSV format.</p>

<p>Table format</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute snapshots list \
--filter="sourceSnapshotSchedulePolicy ~ $POLICY AND sourceDisk~$disk$" \
--format="table(sourceDisk.basename(),name,creationTimestamp,sourceSnapshotSchedulePolicy.basename())" \
--sort-by "~creationTimestamp" \
--project="$PROJECT"
</code></pre></div></div>

<p>CSV format</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute snapshots list \
--filter="sourceSnapshotSchedulePolicy ~ $POLICY AND sourceDisk~$disk$" \
--format="csv[separator=','](sourceDisk.basename(),name,creationTimestamp,sourceSnapshotSchedulePolicy.basename())" \
--sort-by "~creationTimestamp" \
--project="$PROJECT"
</code></pre></div></div>

<p>Output to file</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud compute snapshots list \
--filter="sourceSnapshotSchedulePolicy ~ $POLICY AND sourceDisk~$disk$" \
--format="csv[separator=','](sourceDisk.basename(),name,creationTimestamp,sourceSnapshotSchedulePolicy.basename())" \
--sort-by "~creationTimestamp" \
--project="$PROJECT" &gt; output.csv
</code></pre></div></div>]]></content><author><name>Ulysses</name></author><category term="Cloud" /><category term="csv" /><category term="format" /><category term="gcloud" /><category term="gcp" /><category term="output" /><category term="table" /><summary type="html"><![CDATA[Differences using gcloud table vs CSV format.]]></summary></entry><entry><title type="html">GCP Cloud Shell Format</title><link href="http://0.0.0.0:4000/cloud/2023/09/18/gcp-cloud-shell-format.html" rel="alternate" type="text/html" title="GCP Cloud Shell Format" /><published>2023-09-18T19:53:48+00:00</published><updated>2023-09-18T19:53:48+00:00</updated><id>http://0.0.0.0:4000/cloud/2023/09/18/gcp-cloud-shell-format</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2023/09/18/gcp-cloud-shell-format.html"><![CDATA[<p>If you are getting funky formatting in GCP Cloud Shell, run this to set the format.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud config set accessibility/screen_reader False
</code></pre></div></div>]]></content><author><name>Ulysses</name></author><category term="Cloud" /><category term="cloud" /><category term="format" /><category term="gcp" /><category term="set" /><category term="shell" /><summary type="html"><![CDATA[If you are getting funky formatting in GCP Cloud Shell, run this to set the format.]]></summary></entry></feed>