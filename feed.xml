<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-01-02T14:51:51+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">uly.me</title><subtitle></subtitle><entry><title type="html">truncate titles in jekyll</title><link href="http://0.0.0.0:4000/2024/01/01/truncate-titles-in-jekyll.html" rel="alternate" type="text/html" title="truncate titles in jekyll" /><published>2024-01-01T00:00:00+00:00</published><updated>2024-01-01T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/01/01/truncate-titles-in-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/2024/01/01/truncate-titles-in-jekyll.html"><![CDATA[<p>I switched to a slightly different format in the home page to display the date first followed by the post titles. In addition to the format change, I wanted to truncate the titles that are longer than 40 characters to display only the first 40 characters followed by 3 dots or “…” at the end. The key to making this possible was to use Jekyll’s advanced <a href="https://gist.github.com/JJediny/a466eed62cee30ad45e2">filters</a>, and in particular, using the truncate filter. Swapping the order of date and post titles was the easy part, but the key was using the truncate filter.</p>

<p>Here’s the code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>post.title | downcase | truncate: 40, ' ...'
</code></pre></div></div>

<p>The downcase filter converts post.title to lowercase.</p>

<p>The truncate filter truncates post.title longer than 40 characters and adds 3 dots at the end.</p>

<p>Truncate requires 2 parameters: the length of the string and the characters to append to the string.</p>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[I switched to a slightly different format in the home page to display the date first followed by the post titles. In addition to the format change, I wanted to truncate the titles that are longer than 40 characters to display only the first 40 characters followed by 3 dots or “…” at the end. The key to making this possible was to use Jekyll’s advanced filters, and in particular, using the truncate filter. Swapping the order of date and post titles was the easy part, but the key was using the truncate filter.]]></summary></entry><entry><title type="html">format new volume</title><link href="http://0.0.0.0:4000/2023/12/31/format-new-volume.html" rel="alternate" type="text/html" title="format new volume" /><published>2023-12-31T00:00:00+00:00</published><updated>2023-12-31T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2023/12/31/format-new-volume</id><content type="html" xml:base="http://0.0.0.0:4000/2023/12/31/format-new-volume.html"><![CDATA[<p>I recently bought a 2TB NVME SSD drive which I plan to install on my Linux Mint desktop. I have been taking a ton of pictures lately with my old Nikon D700 DSLR camera and I can use the extra space. Since the new drive is unformatted, here were the steps that I took to get it working on my desktop. This how-to assumes that I have installed the new NVME drive on your motherboard successfully.</p>

<p>The first thing to do is to find out the device name. It shows up as a 1.8TB disk on my desktop.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsblk
nvme0n1 259:0    0   1.8T  0 disk
</code></pre></div></div>

<p>Check if it’s formatted. It should be empty. If not, it will display the file system type.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo file -s /dev/nvme0n1 
</code></pre></div></div>

<p>If empty.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/dev/nvme0n1: data
</code></pre></div></div>

<p>If formatted with XFS.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/dev/nvme0n1: SGI XFS filesystem data (blksz 4096, inosz 512, v2 dirs)
</code></pre></div></div>

<p>Since it’s empty, let’s format the drive. I will use XFS as the file system.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkfs -t xfs /dev/nvme0n1 
</code></pre></div></div>

<p>Let’s mount the drive after formatting. I will use the Nikon directory in my home directory as the mount volume.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir ~/Nikon
sudo mount /dev/nvme0n1 /home/ulysses/Nikon
</code></pre></div></div>

<p>Let’s unmount it temporarily.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo umount /home/ulysses/Nikon
</code></pre></div></div>

<p>Next, I will add an entry to the /etc/fstab to make the drive mount permanent after each reboot. Get the UUID of the new drive using the blkid command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo blkid 
</code></pre></div></div>

<p>Now edit the /etc/fstab file to add the new volume entry.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/fstab
</code></pre></div></div>

<p>The entry will look similar to this. Enter the UUID by replacing the x’s.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /home/ulysses/Nikon          xfs        defaults            0 0
</code></pre></div></div>

<p>Test it by mounting all.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mount -a 
</code></pre></div></div>

<p>If there are no errors, mount was successful. You can check by running the df command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>df -Th
</code></pre></div></div>

<p>It should display something similar to below. I already have 5% data on the drive.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/dev/nvme0n1        xfs        1.9T   83G  1.8T   5% /home/ulysses/Nikon
</code></pre></div></div>

<p>Since everything looks good, I can now safely reboot.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo shutdown -r 
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[I recently bought a 2TB NVME SSD drive which I plan to install on my Linux Mint desktop. I have been taking a ton of pictures lately with my old Nikon D700 DSLR camera and I can use the extra space. Since the new drive is unformatted, here were the steps that I took to get it working on my desktop. This how-to assumes that I have installed the new NVME drive on your motherboard successfully.]]></summary></entry><entry><title type="html">how to shred a volume</title><link href="http://0.0.0.0:4000/linux/2023/12/29/how-to-shred-a-volume.html" rel="alternate" type="text/html" title="how to shred a volume" /><published>2023-12-29T00:00:00+00:00</published><updated>2023-12-29T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2023/12/29/how-to-shred-a-volume</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/12/29/how-to-shred-a-volume.html"><![CDATA[<p>If you have a disk drive, SSD or NVME storage device that need to be wiped clean, I recommend that you use the shred command.</p>

<p>In this example, I’m cleaning up the contents of my NVME device at /dev/nvme0n1.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo shred -v -n 1 --random-source=/dev/urandom -z /dev/nvme0n1
</code></pre></div></div>

<p>I’m using these options and their explanation.</p>

<ul>
  <li>-v is verbose</li>
  <li>-n is the number of iterations. Mine is set to 1. You can increase it, but it can take hours.</li>
  <li>–random-source is set to /dev/urandom which is the kernel’s random number generator.</li>
  <li>-z means everything gets overwritten by zeros.</li>
</ul>

<p>Shred will make it nearly impossible to steal your data.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="shred" /><category term="volume" /><category term="wipe" /><category term="clean" /><category term="erase" /><summary type="html"><![CDATA[If you have a disk drive, SSD or NVME storage device that need to be wiped clean, I recommend that you use the shred command.]]></summary></entry><entry><title type="html">bash input options</title><link href="http://0.0.0.0:4000/linux/2023/12/27/bash-input-options.html" rel="alternate" type="text/html" title="bash input options" /><published>2023-12-27T00:00:00+00:00</published><updated>2023-12-27T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2023/12/27/bash-input-options</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/12/27/bash-input-options.html"><![CDATA[<p>Here are input options that you can use in Bash.</p>

<ol>
  <li>You can set variables within the script.</li>
  <li>You can pass the arguments via command line.</li>
  <li>You can prompt the user to input data.</li>
</ol>

<p>Or you create a script that incorporates all three.</p>

<ol>
  <li>Remove comments if you want to set the variables in the script.</li>
  <li>Pass arguments via command line using the format provided.</li>
  <li>Or be prompted to enter all your arguments one at a time.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># project="projectid"
# instance="hostname"
# zone="us-central1-c"
# policy="hourly"
# snapback=3

# Format (requires all 5 arguments): ./script.sh project host zone policy snapback
# If no arguments are provided or less than 5 arguments, you will be prompted to enter your options.

if [ -z "$project" ] || [ -z "$instance" ] || [ -z "$zone" ] || [ -z "$policy" ] || [ -z "$snapback" ]; then
    if  [ "$#" -eq 5 ]; then
        project=$1
        instance=$2
        zone=$3
        policy=$4
        snapback=$5
    else 
        read -p "projectId : " project
        read -p "instance  : " instance
        read -p "zone      : " zone
        read -p "policy    : " policy
        read -p "snapback  : " snapback
    fi
fi
echo $project $instance $zone $policy $snapback
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="bash" /><category term="input" /><category term="options" /><category term="arguments" /><category term="variables" /><summary type="html"><![CDATA[Here are input options that you can use in Bash.]]></summary></entry><entry><title type="html">Bash function within a function</title><link href="http://0.0.0.0:4000/linux/2023/12/24/bash-function-within-a-function.html" rel="alternate" type="text/html" title="Bash function within a function" /><published>2023-12-24T00:00:00+00:00</published><updated>2023-12-24T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2023/12/24/bash-function-within-a-function</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/12/24/bash-function-within-a-function.html"><![CDATA[<p>How to make a function call within a function in Bash.</p>

<p>In my previous <a href="/cloud/2023/12/20/gcp-restore-boot-disk.html">post</a>, I used several functions. We will call them in the main function below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main() {

  checkLogin
  displayHeader
  getDisks
  getSnaps 

  read -p "Do you want to proceed with restore? Are you sure? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    stopServer
    detachDisks
    deleteDisks
    createDisks
    attachDisks
    setAutodelete
    startServer
  fi
}

main 
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="bash" /><category term="function" /><category term="call" /><category term="within" /><category term="function" /><summary type="html"><![CDATA[How to make a function call within a function in Bash.]]></summary></entry><entry><title type="html">Random words from array</title><link href="http://0.0.0.0:4000/linux/2023/12/24/random-words-from-array.html" rel="alternate" type="text/html" title="Random words from array" /><published>2023-12-24T00:00:00+00:00</published><updated>2023-12-24T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2023/12/24/random-words-from-array</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/12/24/random-words-from-array.html"><![CDATA[<p>Here’s how to to generate random words from an array in Bash using shuf.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FOOD=('Milk' 'Bread' 'Eggs' 'Sausage' 'Grits' 'Banana' 'Oatmeal')
shuf -e ${FOOD[@]}
Milk
Grits
Sausage
Oatmeal
Bread
Banana
Eggs
</code></pre></div></div>

<p>You can limit output to 3 by piping output using head -n 3.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FOOD=('Milk' 'Bread' 'Eggs' 'Sausage' 'Grits' 'Banana' 'Oatmeal')
shuf -e ${FOOD[@]} | head -n 3
Bread
Sausage
Eggs
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="random" /><category term="words" /><category term="array" /><category term="bash" /><category term="shuf" /><summary type="html"><![CDATA[Here’s how to to generate random words from an array in Bash using shuf.]]></summary></entry><entry><title type="html">Search replace lowercase</title><link href="http://0.0.0.0:4000/linux/2023/12/21/search-replace-lowercase.html" rel="alternate" type="text/html" title="Search replace lowercase" /><published>2023-12-21T00:00:00+00:00</published><updated>2023-12-21T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2023/12/21/search-replace-lowercase</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2023/12/21/search-replace-lowercase.html"><![CDATA[<p>Here’s a script I use to edit over 1000 files to convert my post titles to all lowercase.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash 
cd ~/Code/docker/ulyme/_posts
searchReplace() {
    for filename in 20*.md; do
        sed -i -e 's/title:.*/\L&amp;/g' $filename
    done
}
searchReplace

</code></pre></div></div>

<p>It took a mere 2-3 seconds to convert all titles on over 1000 files.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="search" /><category term="replace" /><category term="lowercase" /><summary type="html"><![CDATA[Here’s a script I use to edit over 1000 files to convert my post titles to all lowercase.]]></summary></entry><entry><title type="html">gcp restore all disks</title><link href="http://0.0.0.0:4000/cloud/2023/12/20/gcp-restore-all-disks.html" rel="alternate" type="text/html" title="gcp restore all disks" /><published>2023-12-20T00:00:00+00:00</published><updated>2023-12-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2023/12/20/gcp-restore-all-disks</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2023/12/20/gcp-restore-all-disks.html"><![CDATA[<p>Here’s my latest script on how to restore all disks of a VM in GCP.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# project="projectid"
# instance="hostname"
# zone="us-central1-c"
# policy="hourly"
# snapback=3

# Format (requires all 5 arguments): ./script.sh project host zone policy snapback
# If no arguments are provided or less than 5 arguments, you will be prompted to enter your options.

if [ -z "$project" ] || [ -z "$instance" ] || [ -z "$zone" ] || [ -z "$policy" ] || [ -z "$snapback" ]; then

    if  [ "$#" -eq 5 ]; then
        project=$1
        instance=$2
        zone=$3
        policy=$4
        snapback=$5
    else 
        read -p "projectId : " project
        read -p "instance  : " instance
        read -p "zone      : " zone
        read -p "policy    : " policy
        read -p "snapback  : " snapback
    fi

fi

echo $project $instance $zone $policy $snapback

checkLogin() {

    user=$(gcloud config list account --format "value(core.account)")
    user=$(echo $user | cut -d@ -f1)
    user=${user/./-}

    if [ -z "$user" ]; then
        echo "You're not logged in to Google SDK."
        exit
    fi

}

displayHeader() {

    echo "######################################################"
    echo "Starting the restore process for $instance "
    echo "######################################################"

}

getDisks() {

    disks=$(gcloud compute disks list \
        --filter="users:$instance" \
        --format="value(name)" \
        --project="$project")

    echo "Listing disks for $instance ... "

    for disk in $disks; do

        echo $disk
    
    done

}

getSnaps() {

    echo "Listing snapshots to restore for $instance ... "

    for disk in $disks; do

        snap=$(gcloud compute snapshots list \
            --filter="sourceSnapshotSchedulePolicy~$policy AND sourceDisk~$disk" \
            --format="value(name)" \
            --project="$project" \
            --sort-by="~creationTimestamp" | head -n $snapback | tail -n 1)

        echo "$disk: $snap" 

    done 

}

stopServer() {

    echo "Stopping server ..."

    gcloud compute instances stop $instance \
        --zone="$zone" \
        --project="$project"

}

detachDisks() {

    echo "Detaching disks ..."

    for disk in $disks; do

        gcloud compute instances detach-disk $instance \
            --disk="$disk" \
            --zone="$zone" \
            --project="$project"

    done 

}

deleteDisks() {

    echo "Deleting disks ..."

    for disk in $disks; do

        gcloud compute disks delete $disk \
            --zone="$zone" \
            --project="$project"

    done

}

createDisks() {

    echo "Creating disks ..."

    for disk in $disks; do

        snap=$(gcloud compute snapshots list \
            --filter="sourceDisk~$disk" \
            --format="value(name)" \
            --project="$project" \
            --sort-by="~creationTimestamp" | head -n $snapback | tail -n 1)

        gcloud compute disks create $disk \
            --source-snapshot="$snap" \
            --zone="$zone" \
            --project="$project"

    done

}

attachDisks() {

    echo "Attaching disks ..."

    count=1

    for disk in $disks; do

        if [ $count == 1 ]; then 
            gcloud compute instances attach-disk $instance \
                --disk="$disk" \
                --device-name="$disk" \
                --zone="$zone" \
                --project="$project" \
                --boot
        else 
            gcloud compute instances attach-disk $instance \
                --disk="$disk" \
                --device-name="$disk" \
                --zone="$zone" \
                --project="$project"
        fi

        count=$((count+1))

    done 

}

setAutodelete() {

    echo "Setting autodelete on disks ..."

    for disk in $disks; do

        gcloud compute instances set-disk-auto-delete $instance \
            --auto-delete \
            --disk="$disk" \
            --zone="$zone" \
            --project="$project"

    done 

}

startServer() {

    echo "Starting server ..."

    gcloud compute instances start $instance \
        --zone="$zone" \
        --project="$project"

}

main() {

    checkLogin
    displayHeader
    getDisks
    getSnaps 

    read -p "Do you want to proceed with restore? Are you sure? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        stopServer
        detachDisks
        deleteDisks
        createDisks
        attachDisks
        setAutodelete
        startServer
    fi
    
}

main
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcp" /><category term="compute" /><category term="restore" /><category term="all" /><category term="disks" /><summary type="html"><![CDATA[Here’s my latest script on how to restore all disks of a VM in GCP.]]></summary></entry><entry><title type="html">gcp restore boot disk</title><link href="http://0.0.0.0:4000/cloud/2023/12/20/gcp-restore-boot-disk.html" rel="alternate" type="text/html" title="gcp restore boot disk" /><published>2023-12-20T00:00:00+00:00</published><updated>2023-12-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2023/12/20/gcp-restore-boot-disk</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2023/12/20/gcp-restore-boot-disk.html"><![CDATA[<p>Here’s my latest script to restore the boot disk of a VM in GCP.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# project="projectid"
# instance="hostname"
# zone="us-central1-c"
# policy="hourly"
# snapback=3

# Format (requires all 5 arguments): ./script.sh project host zone policy snapback
# If no arguments are provided or if less than 5 arguments, then you will be prompted to enter options.

if [ -z "$project" ] || [ -z "$instance" ] || [ -z "$zone" ] || [ -z "$policy" ] || [ -z "$snapback" ]; then

    if  [ "$#" -eq 5 ]; then
        project=$1
        instance=$2
        zone=$3
        policy=$4
        snapback=$5
    else 
        read -p "projectId : " project
        read -p "instance  : " instance
        read -p "zone      : " zone
        read -p "policy    : " policy
        read -p "snapback  : " snapback
    fi

fi

echo $project $instance $zone $policy $snapback

checkLogin() {

    user=$(gcloud config list account --format "value(core.account)")
    user=$(echo $user | cut -d@ -f1)
    user=${user/./-}

    if [ -z "$user" ]; then
        echo "You're not logged in to Google SDK."
        exit
    fi

}

displayHeader() {

    echo "######################################################"
    echo "Starting the restore process for $instance "
    echo "######################################################"

}

getDisks() {

    disks=$(gcloud compute instances describe $instance \
        --project="$project" \
        --zone="$zone" \
        --format="get(disks[0].source)")

    echo "Listing disks for $instance ... "

    disk=$(echo ${disks##*/})

    echo $disk

}

getSnaps() {

    echo "Listing snapshots to restore for $instance ... "
 
    snap=$(gcloud compute snapshots list \
        --filter="sourceSnapshotSchedulePolicy~$policy AND sourceDisk~$disk" \
        --format="value(name)" \
        --project="$project" \
        --sort-by="~creationTimestamp" | head -n $snapback | tail -n 1)

    echo "$disk: $snap" 

}

stopServer() {

    echo "Stopping server ..."

    gcloud compute instances stop $instance \
        --zone="$zone" \
        --project="$project"

}

detachDisks() {

    echo "Detaching disks ..."

    gcloud compute instances detach-disk $instance \
        --disk="$disk" \
        --zone="$zone" \
        --project="$project"

}

deleteDisks() {

    echo "Deleting disks ..."

    gcloud compute disks delete $disk \
        --zone="$zone" \
        --project="$project"

}

createDisks() {

    echo "Creating disks ..."

    snap=$(gcloud compute snapshots list \
        --filter="sourceDisk~$disk" \
        --format="value(name)" \
        --project="$project" \
        --sort-by="~creationTimestamp" | head -n $snapback | tail -n 1)

    gcloud compute disks create $disk \
        --source-snapshot="$snap" \
        --zone="$zone" \
        --project="$project"

}

attachDisks() {

    echo "Attaching disks ..."

    gcloud compute instances attach-disk $instance \
        --disk="$disk" \
        --device-name="$disk" \
        --zone="$zone" \
        --project="$project" \
        --boot

}

setAutodelete() {

    echo "Setting autodelete on disks ..."

    gcloud compute instances set-disk-auto-delete $instance \
        --auto-delete \
        --disk="$disk" \
        --zone="$zone" \
        --project="$project"

}

startServer() {

    echo "Starting server ..."

    gcloud compute instances start $instance \
        --zone="$zone" \
        --project="$project"

}

main() {

    checkLogin
    displayHeader
    getDisks
    getSnaps 

    read -p "Do you want to proceed with restore? Are you sure? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        stopServer
        detachDisks
        deleteDisks
        createDisks
        attachDisks
        setAutodelete
        startServer
    fi
    
}

main
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcp" /><category term="restore" /><category term="vm" /><category term="boot" /><category term="disk" /><summary type="html"><![CDATA[Here’s my latest script to restore the boot disk of a VM in GCP.]]></summary></entry><entry><title type="html">gcp vm list all snapshots</title><link href="http://0.0.0.0:4000/cloud/2023/12/19/gcp-vm-list-all-snapshots.html" rel="alternate" type="text/html" title="gcp vm list all snapshots" /><published>2023-12-19T00:00:00+00:00</published><updated>2023-12-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/cloud/2023/12/19/gcp-vm-list-all-snapshots</id><content type="html" xml:base="http://0.0.0.0:4000/cloud/2023/12/19/gcp-vm-list-all-snapshots.html"><![CDATA[<p>Here’s how to list all the snapshots for a particular VM in GCP.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

if [ "$#" -ne 3 ]
then
  echo "Usage: ./gcp-list-all-snapshots.sh project server policy"
  exit
fi

# Set the name of the snapshot schedule policy and the disk name to filter by
PROJECT=$1            # PROJECT="projectId"
SERVER=$2             # DISK_NAME="hostname"
POLICY=$3             # POLICY_NAME="hourly or daily"

disks=$(gcloud compute disks list --project $PROJECT --filter="name~$SERVER" --format="value(name)") 

for disk in $disks; do

  # List all snapshots created by the snapshot schedule policy
  gcloud compute snapshots list \
  --filter="sourceSnapshotSchedulePolicy ~ $POLICY AND sourceDisk~$disk$" \
  --format="table(sourceDisk.basename(),name,creationTimestamp,sourceSnapshotSchedulePolicy.basename())" \
  --sort-by "~creationTimestamp" \
  --project="$PROJECT"

done
</code></pre></div></div>

<p>The script requires three arguments: projectId, hostname and policy.</p>]]></content><author><name>ulysses</name></author><category term="cloud" /><category term="gcp" /><category term="vm" /><category term="list" /><category term="snapshots" /><category term="policy" /><summary type="html"><![CDATA[Here’s how to list all the snapshots for a particular VM in GCP.]]></summary></entry></feed>