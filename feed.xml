<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-05-19T00:50:45+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">uly.me</title><subtitle></subtitle><entry><title type="html">gcp exit serial console</title><link href="http://0.0.0.0:4000/linux/2024/04/11/gcp-exit-serial-console.html" rel="alternate" type="text/html" title="gcp exit serial console" /><published>2024-04-11T00:00:00+00:00</published><updated>2024-04-11T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/04/11/gcp-exit-serial-console</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/04/11/gcp-exit-serial-console.html"><![CDATA[<p>How to exit gracefully from GCP’s serial console.</p>

<p>Type on the keyboard tilde followed by dot.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~.
</code></pre></div></div>
<p>That would be tilde followed by a dot.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="gcp" /><category term="exit" /><category term="serial" /><category term="console" /><summary type="html"><![CDATA[How to exit gracefully from GCP’s serial console.]]></summary></entry><entry><title type="html">bash function comments</title><link href="http://0.0.0.0:4000/linux/2024/04/05/bash-function-comments.html" rel="alternate" type="text/html" title="bash function comments" /><published>2024-04-05T00:00:00+00:00</published><updated>2024-04-05T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/04/05/bash-function-comments</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/04/05/bash-function-comments.html"><![CDATA[<p>Here’s a good way to add comments to a Bash function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>############################################################
# Function    : calculate_average
# Description : Calculates the average of a list of numbers.
# Parameters  : List of numbers separated by spaces
# Returns     : The average value of the input numbers
############################################################
calculate_average() {
  ...
}

############################################################
# Function    : calculate_sum
# Description : Calculates the sum of a list of numbers.
# Parameters  : List of numbers separated by spaces
# Returns     : The sum value of the input numbers
############################################################
calculate_sum() {
  ...
}
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="bash" /><category term="functions" /><category term="comments" /><summary type="html"><![CDATA[Here’s a good way to add comments to a Bash function.]]></summary></entry><entry><title type="html">add to crontab with no duplicate</title><link href="http://0.0.0.0:4000/linux/2024/03/17/add-to-crontab-with-no-duplicate.html" rel="alternate" type="text/html" title="add to crontab with no duplicate" /><published>2024-03-17T00:00:00+00:00</published><updated>2024-03-17T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/03/17/add-to-crontab-with-no-duplicate</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/03/17/add-to-crontab-with-no-duplicate.html"><![CDATA[<p>How to add to a crontab without creating duplicates.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crontab -l | grep 'myscript.sh' || (crontab -l 2&gt;/dev/null; echo "45 10 * * * /path/to/myscript.sh") | crontab -
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="add" /><category term="crontab" /><category term="duplicates" /><summary type="html"><![CDATA[How to add to a crontab without creating duplicates.]]></summary></entry><entry><title type="html">diff files in two directories</title><link href="http://0.0.0.0:4000/linux/2024/03/07/diff-files-in-two-directories.html" rel="alternate" type="text/html" title="diff files in two directories" /><published>2024-03-07T00:00:00+00:00</published><updated>2024-03-07T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/03/07/diff-files-in-two-directories</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/03/07/diff-files-in-two-directories.html"><![CDATA[<p>Here’s a good way to compare two directories to see if both directories contain similar files.</p>

<p>This is essential if you want to combine two directories into one.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff -qr dir1 dir2 | sort
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="diff" /><category term="files" /><category term="two" /><category term="directories" /><summary type="html"><![CDATA[Here’s a good way to compare two directories to see if both directories contain similar files.]]></summary></entry><entry><title type="html">timestamp timezone conversion</title><link href="http://0.0.0.0:4000/linux/2024/02/24/timestamp-timezone-conversion.html" rel="alternate" type="text/html" title="timestamp timezone conversion" /><published>2024-02-24T00:00:00+00:00</published><updated>2024-02-24T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/24/timestamp-timezone-conversion</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/24/timestamp-timezone-conversion.html"><![CDATA[<p>Here’s a function that will convert a timestamp from one timezone to another, in this case from UTC to ET timezone.</p>

<p>Get a list of snapshots</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>list_snapshots() {
    volume_name="$1"
    snapshots=$(gcloud compute snapshots list --filter="sourceDisk=$volume_name" --format="value(name,creationTimestamp.date('%s'))")
    while read -r snapshot; do
        snapshot_name=$(echo "$snapshot" | cut -d' ' -f1)
        creation_timestamp=$(echo "$snapshot" | cut -d' ' -f2)
        et_creation_timestamp=$(convert_to_et "$creation_timestamp")
        echo "Snapshot: $snapshot_name, Creation Time (ET): $et_creation_timestamp"
    done &lt;&lt;&lt; "$snapshots"
}
</code></pre></div></div>

<p>The function to convert to ET timezone.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>convert_to_et() {
    timestamp="$1"
    et_timestamp=$(date --date="@${timestamp}" +"%Y-%m-%d %H:%M:%S %Z" -u)
    echo "$et_timestamp"
}
</code></pre></div></div>

<p>Finally, call the function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>volume_name="$1"
list_snapshots "$volume_name"
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="timestamp" /><category term="timezone" /><category term="conversion" /><summary type="html"><![CDATA[Here’s a function that will convert a timestamp from one timezone to another, in this case from UTC to ET timezone.]]></summary></entry><entry><title type="html">ddwrt</title><link href="http://0.0.0.0:4000/linux/2024/02/22/ddwrt.html" rel="alternate" type="text/html" title="ddwrt" /><published>2024-02-22T00:00:00+00:00</published><updated>2024-02-22T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/22/ddwrt</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/22/ddwrt.html"><![CDATA[<p>After a few weeks with OpenWRT, I decided to switch to DDWRT. Nothing wrong with OpenWRT other than DDWRT is much simpler.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="ddwrt" /><category term="router" /><summary type="html"><![CDATA[After a few weeks with OpenWRT, I decided to switch to DDWRT. Nothing wrong with OpenWRT other than DDWRT is much simpler.]]></summary></entry><entry><title type="html">brigthen</title><link href="http://0.0.0.0:4000/linux/2024/02/19/brigthen.html" rel="alternate" type="text/html" title="brigthen" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/brigthen</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/brigthen.html"><![CDATA[<p>A little Python script to brighten an image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import ImageEnhance, Image

def brightenImage(input_dir, output_dir):
    os.makedirs(output_dir, exist_ok=True)                                          # output directory
    for filename in os.listdir(input_dir):                                          # loop through files
        if filename.lower().endswith('.jpg'):                                       # check if jpg
            with Image.open(os.path.join(input_dir, filename)) as img:              # open jpg  
                enhanced_img = ImageEnhance.Contrast(img).enhance(1.25)             # enhance contrast
                enhanced_img = ImageEnhance.Brightness(enhanced_img).enhance(1.5)   # enhance brightness
                enhanced_img.save(os.path.join(output_dir, filename))               # save output

if __name__ == '__main__':
    input_directory = '.'                                                           # input directory
    output_directory = 'output'                                                     # output directory
    brightenImage(input_directory, output_directory)                                # brighten image
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="brigthen" /><category term="image" /><category term="jpg" /><summary type="html"><![CDATA[A little Python script to brighten an image.]]></summary></entry><entry><title type="html">enhance</title><link href="http://0.0.0.0:4000/linux/2024/02/19/enhance.html" rel="alternate" type="text/html" title="enhance" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/enhance</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/enhance.html"><![CDATA[<p>Here’s a litte Python script that enhance a jpg image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import ImageEnhance, Image

def enhance(input_dir, output_dir, factor=1.75):
    os.makedirs(output_dir, exist_ok=True)                                  # Create output directory   
    for filename in os.listdir(input_dir):                                  # Loop through all files
        if filename.lower().endswith('.jpg'):                               # Check if JPG image
            with Image.open(os.path.join(input_dir, filename)) as img:      # Open the image file
                enhanced_img = ImageEnhance.Color(img).enhance(factor)      # Enhance image
                enhanced_img.save(os.path.join(output_dir, filename))       # Save image

if __name__ == '__main__':
    input_directory = '.'                                                   # input directory
    output_directory = 'output'                                             # output directory
    enhance(input_directory, output_directory)                              # enhance
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="enhance" /><category term="jpg" /><summary type="html"><![CDATA[Here’s a litte Python script that enhance a jpg image.]]></summary></entry><entry><title type="html">resize</title><link href="http://0.0.0.0:4000/linux/2024/02/19/resize.html" rel="alternate" type="text/html" title="resize" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/resize</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/resize.html"><![CDATA[<p>Here’s a little Python script that creates thumbnails.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import Image

def resize(input_dir, output_dir, thumbnail_size=(720, 720)):               # set to 720p
    os.makedirs(output_dir, exist_ok=True)                                  # output directory 
    for filename in os.listdir(input_dir):                                  # loop through files 
        if filename.lower().endswith('.jpg'):                               # check if JPG
            with Image.open(os.path.join(input_dir, filename)) as img:      # open image
                img.thumbnail(thumbnail_size)                               # reduce to thumbnail
                img.save(os.path.join(output_dir, filename))                # save thumbnail

if __name__ == '__main__':
    input_directory = '.'                                                   # input directory
    output_directory = 'output'                                             # output directory
    resize(input_directory, output_directory)                               # resize images
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="python" /><category term="resize" /><category term="thumbnail" /><category term="images" /><category term="jpg" /><summary type="html"><![CDATA[Here’s a little Python script that creates thumbnails.]]></summary></entry><entry><title type="html">vintage</title><link href="http://0.0.0.0:4000/linux/2024/02/19/vintage.html" rel="alternate" type="text/html" title="vintage" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/vintage</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/vintage.html"><![CDATA[<p>Here’s a little Python script that makes vintage pictures.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import Image, ImageFilter, ImageOps, ImageEnhance

def vintage(input_dir, output_dir):
    os.makedirs(output_dir, exist_ok=True)                                  # output directory
    for filename in os.listdir(input_dir):                                  # Loop through files
        if filename.lower().endswith('.jpg'):                               # Check if JPG

            with Image.open(os.path.join(input_dir, filename)) as img:      # Open jpg
                img = img.convert("RGB")                                    # vintage effects
                img = ImageOps.grayscale(img)
                img = img.filter(ImageFilter.SMOOTH_MORE)
                img = ImageOps.posterize(img, 8)
                img = ImageEnhance.Contrast(img).enhance(1.4)
                img = ImageEnhance.Brightness(img).enhance(1.75)
                img = ImageOps.colorize(img, "#704214", "#eeeeee")
                img = ImageEnhance.Color(img).enhance(0.8)
                img.save(os.path.join(output_dir, filename))                # Save image

if __name__ == '__main__':
    input_directory = '.'                                                   # input directory
    output_directory = 'output'                                             # output directory
    vintage(input_directory, output_directory)                              # make vintage
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="python" /><category term="vintage" /><category term="jpg" /><category term="images" /><summary type="html"><![CDATA[Here’s a little Python script that makes vintage pictures.]]></summary></entry></feed>