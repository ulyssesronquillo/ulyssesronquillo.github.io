<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-12-30T15:45:46+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">uly.me</title><subtitle></subtitle><entry><title type="html">install azure cli</title><link href="http://0.0.0.0:4000/2024/12/30/install-azure-cli.html" rel="alternate" type="text/html" title="install azure cli" /><published>2024-12-30T00:00:00+00:00</published><updated>2024-12-30T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/30/install-azure-cli</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/30/install-azure-cli.html"><![CDATA[<p>Install the Azure CLI on a Linux Desktop. This one of 2 options, but this is by far the easiest.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
</code></pre></div></div>

<p>Validate Azure CLI is installed</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az --version
</code></pre></div></div>

<p>To upgrade</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az upgrade
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[Install the Azure CLI on a Linux Desktop. This one of 2 options, but this is by far the easiest.]]></summary></entry><entry><title type="html">logitech keyboard bluetooth linux</title><link href="http://0.0.0.0:4000/2024/12/27/logitech-keyboard-bluetooth-linux.html" rel="alternate" type="text/html" title="logitech keyboard bluetooth linux" /><published>2024-12-27T00:00:00+00:00</published><updated>2024-12-27T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/27/logitech-keyboard-bluetooth-linux</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/27/logitech-keyboard-bluetooth-linux.html"><![CDATA[<p>These are the steps taken to make my Logitech K811 keyboard to connect via Bluetooth in Linux Mint.</p>

<p>Run bluetoothctl</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bluetoothctl
</code></pre></div></div>

<p>In the bluetoothctl command line run these commands. Replace with your own device number.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remove 00:XX:XX:XX:XX:1F
scan on
pair 00:XX:XX:XX:XX:1F
connect 00:XX:XX:XX:XX:1F
trust 00:XX:XX:XX:XX:1F
</code></pre></div></div>

<p>You may be asked to type a six digit code to pair the device.</p>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[These are the steps taken to make my Logitech K811 keyboard to connect via Bluetooth in Linux Mint.]]></summary></entry><entry><title type="html">split file into multiple files</title><link href="http://0.0.0.0:4000/2024/12/26/split-file-into-multiple-files.html" rel="alternate" type="text/html" title="split file into multiple files" /><published>2024-12-26T00:00:00+00:00</published><updated>2024-12-26T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/26/split-file-into-multiple-files</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/26/split-file-into-multiple-files.html"><![CDATA[<p>How to split a file into multiple files. In this example, it’s split in lines of 100.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# Input file name
input_file="$1"

# Lines per file
lines_per_file=100

# Check if input file exists
if [ ! -f "$input_file" ]; then
  echo "Error: Input file '$input_file' not found."
  exit 1
fi

# Get the number of lines in the input file
total_lines=$(wc -l &lt; "$input_file")

# Calculate the number of output files needed
num_files=$(( (total_lines + lines_per_file - 1) / lines_per_file ))

# Loop through the input file and split it into multiple files
for ((i=1; i&lt;=num_files; i++)); do
  # Output file name
  output_file="${input_file}_part${i}"

  # Extract lines from the input file
  head -n "$((i * lines_per_file))" "$input_file" | tail -n "$lines_per_file" &gt; "$output_file"
done

echo "File '$input_file' split into $num_files files."

exit 0
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[How to split a file into multiple files. In this example, it’s split in lines of 100.]]></summary></entry><entry><title type="html">copy files from directory to directory</title><link href="http://0.0.0.0:4000/2024/12/25/copy-files-from-directory-to-directory.html" rel="alternate" type="text/html" title="copy files from directory to directory" /><published>2024-12-25T00:00:00+00:00</published><updated>2024-12-25T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/25/copy-files-from-directory-to-directory</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/25/copy-files-from-directory-to-directory.html"><![CDATA[<p>How to copy files from source to the target directory. Copy only if file is not present in the target.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

source="/home/ulysses/Cameras/fujifilm"
target="/home/ulysses/Cameras/Fujifilm"

output="output.txt"
&gt; $output

# Check if source directory exists
if [ ! -d "$source" ]; then
    echo "Error: Directory '$source' does not exist."
    exit 1
fi

# Find all JPG files in the source directory
find "$source" -type f -iname "*.JPG" | while read -r file; do

    # Get the basename.
    filename=$(basename "$file")

    # Check if filename is in target directory.
    if find "$target" -type f -name "$filename" -print -quit | grep -q .; then
        true
    else
        # Copy file from source to target.
        cp $source/$filename $target/100_FUJI/
        echo "Copying $file to $target/100_FUJI." | tee -a $output
    fi
done
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[How to copy files from source to the target directory. Copy only if file is not present in the target.]]></summary></entry><entry><title type="html">tar multiple directories to targz</title><link href="http://0.0.0.0:4000/2024/12/22/tar-multiple-directories-to-targz.html" rel="alternate" type="text/html" title="tar multiple directories to targz" /><published>2024-12-22T00:00:00+00:00</published><updated>2024-12-22T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/22/tar-multiple-directories-to-targz</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/22/tar-multiple-directories-to-targz.html"><![CDATA[<p>Tar multiple directories to a single tar.gz file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tar -czvf /home/ulysses/Code/backup.tar.gz ~/Documents/ ~/Downloads ~/Git/gcloud/ ~/Pictures ~/Videos
</code></pre></div></div>

<p>To list files inside the tar.gz file, run this.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tar -tzvf /home/ulysses/Code/backup.tar.gz
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[Tar multiple directories to a single tar.gz file.]]></summary></entry><entry><title type="html">gcp create image with license</title><link href="http://0.0.0.0:4000/2024/12/18/gcp-create-image-with-license.html" rel="alternate" type="text/html" title="gcp create image with license" /><published>2024-12-18T00:00:00+00:00</published><updated>2024-12-18T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/18/gcp-create-image-with-license</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/18/gcp-create-image-with-license.html"><![CDATA[<p>Here’s the gcloud command to create a new image with an extended license with an option to add family type.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcloud beta compute images create new-image-with-license \
--source-image=this-is-the-source-image \
--family rocky-9 \
--project your-project-id \
--user-licenses=https://www.googleapis.com/compute/v1/projects/rhel-cloud/global/licenses/rhel-7-els
</code></pre></div></div>

<p>Any VM provisioned using this image will now have the extended license.</p>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[Here’s the gcloud command to create a new image with an extended license with an option to add family type.]]></summary></entry><entry><title type="html">gsutil copy local recursively to bucket</title><link href="http://0.0.0.0:4000/2024/12/17/gsutil-copy-local-recursively-to-bucket.html" rel="alternate" type="text/html" title="gsutil copy local recursively to bucket" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/17/gsutil-copy-local-recursively-to-bucket</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/17/gsutil-copy-local-recursively-to-bucket.html"><![CDATA[<p>Here’s a gsutil command to copy a directory recursively to a GCS bucket via parallel uploads.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Define source and destination
SOURCE_DIR="/path/to/local/directory"
DEST_BUCKET="gs://your-bucket-name"

# Use gsutil with the -m flag for parallel uploads
gsutil -m cp -r "$SOURCE_DIR" "$DEST_BUCKET"
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[Here’s a gsutil command to copy a directory recursively to a GCS bucket via parallel uploads.]]></summary></entry><entry><title type="html">logitech keyboard bluetooth issues</title><link href="http://0.0.0.0:4000/2024/12/17/logitech-keyboard-bluetooth-issues.html" rel="alternate" type="text/html" title="logitech keyboard bluetooth issues" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/17/logitech-keyboard-bluetooth-issues</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/17/logitech-keyboard-bluetooth-issues.html"><![CDATA[<p>I fixed my Bluetooth issues with my Logitech K811 keyboard on Linux Mint</p>

<p>Take note of your device ID in a similar format as a MAC Address.</p>

<p>Here are the steps I took to fix the pairing issue.</p>

<p>Run bluetoothctl, you will get a special prompt.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bluetoothctl 
</code></pre></div></div>

<p>Perform a scan. Copy the device ID.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scan on
</code></pre></div></div>

<p>Remove the device.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remove ID
</code></pre></div></div>

<p>Finally reconnect device.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>connect ID
trust ID
pair ID
</code></pre></div></div>

<p>You may be prompted to enter the pairing code.</p>

<p>Simply enter the numbers.</p>

<p>That’s it.</p>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[I fixed my Bluetooth issues with my Logitech K811 keyboard on Linux Mint]]></summary></entry><entry><title type="html">python copy files gcs bucket</title><link href="http://0.0.0.0:4000/2024/12/17/python-copy-files-gcs-bucket.html" rel="alternate" type="text/html" title="python copy files gcs bucket" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/12/17/python-copy-files-gcs-bucket</id><content type="html" xml:base="http://0.0.0.0:4000/2024/12/17/python-copy-files-gcs-bucket.html"><![CDATA[<p>I have a Python script that copies files from a local directory to a GCS bucket and down a couple of directories.</p>

<p>The script was tested in a Python virtual environment. Google Cloud Storage module is required which can be installed via pip.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install google-cloud-storage
</code></pre></div></div>

<p>If you have trouble running pip, you may have to run this on Linux Mint (Ubuntu) to update the virtual environment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install python3.12-venv
</code></pre></div></div>

<p>For authentication, you will need to download the service account credentials key that has write access to the GCS bucket.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export GOOGLE_APPLICATION_CREDENTIALS="key.json"
</code></pre></div></div>

<p>Finally, here’s the Python script …</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!bin/python

from google.cloud import storage
import os

def upload_files_to_gcs(bucket_name, directory, destination_directory):
    """Uploads files from a local directory to a GCS bucket.

    Args:
        bucket_name: The name of the GCS bucket.
        directory: The local directory containing the files to upload.
        destination_directory: The directory in the GCS bucket where the files will be uploaded.
    """

    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)

    for file_name in os.listdir(directory):
        file_path = os.path.join(directory, file_name)

        if os.path.isfile(file_path):
            blob = bucket.blob(os.path.join(destination_directory, file_name))
            blob.upload_from_filename(file_path)

            print(f"Uploaded {file_name} to {bucket_name}/{destination_directory}")

if __name__ == "__main__":
    bucket_name = "ulysses-test-bucket"
    directory = "/home/ulysses/Code/python/gcs/upload"
    destination_directory = "upload/test/"

    upload_files_to_gcs(bucket_name, directory, destination_directory)
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[I have a Python script that copies files from a local directory to a GCS bucket and down a couple of directories.]]></summary></entry><entry><title type="html">generating a bash script</title><link href="http://0.0.0.0:4000/2024/11/08/generating-a-bash-script.html" rel="alternate" type="text/html" title="generating a bash script" /><published>2024-11-08T00:00:00+00:00</published><updated>2024-11-08T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/11/08/generating-a-bash-script</id><content type="html" xml:base="http://0.0.0.0:4000/2024/11/08/generating-a-bash-script.html"><![CDATA[<p>Here’s the code for a bash script that generates another bash script and then executes it, as well as deletes it in the end.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# Define the script content
script_content='#!/bin/bash
echo "Hello, this is the generated script!"
echo "The current date and time is: $(date)"
'

# Define the name of the new script
new_script="generated_script.sh"

# Write the content to the new script file
echo "$script_content" &gt; "$new_script"

# Make the new script executable
chmod +x "$new_script"

# Execute the new script
./"$new_script"

rm -f $new_script
</code></pre></div></div>]]></content><author><name>ulysses</name></author><summary type="html"><![CDATA[Here’s the code for a bash script that generates another bash script and then executes it, as well as deletes it in the end.]]></summary></entry></feed>