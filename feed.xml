<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-02-24T23:07:58+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">uly.me</title><subtitle></subtitle><entry><title type="html">timestamp timezone conversion</title><link href="http://0.0.0.0:4000/linux/2024/02/24/timestamp-timezone-conversion.html" rel="alternate" type="text/html" title="timestamp timezone conversion" /><published>2024-02-24T00:00:00+00:00</published><updated>2024-02-24T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/24/timestamp-timezone-conversion</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/24/timestamp-timezone-conversion.html"><![CDATA[<p>Here’s a function that will convert a timestamp from one timezone to another, in this case from UTC to ET timezone.</p>

<p>Get a list of snapshots</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>list_snapshots() {
    volume_name="$1"
    snapshots=$(gcloud compute snapshots list --filter="sourceDisk=$volume_name" --format="value(name,creationTimestamp.date('%s'))")
    while read -r snapshot; do
        snapshot_name=$(echo "$snapshot" | cut -d' ' -f1)
        creation_timestamp=$(echo "$snapshot" | cut -d' ' -f2)
        et_creation_timestamp=$(convert_to_et "$creation_timestamp")
        echo "Snapshot: $snapshot_name, Creation Time (ET): $et_creation_timestamp"
    done &lt;&lt;&lt; "$snapshots"
}
</code></pre></div></div>

<p>The function to convert to ET timezone.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>convert_to_et() {
    timestamp="$1"
    et_timestamp=$(date --date="@${timestamp}" +"%Y-%m-%d %H:%M:%S %Z" -u)
    echo "$et_timestamp"
}
</code></pre></div></div>

<p>Finally, call the function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>volume_name="$1"
list_snapshots "$volume_name"
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="timestamp" /><category term="timezone" /><category term="conversion" /><summary type="html"><![CDATA[Here’s a function that will convert a timestamp from one timezone to another, in this case from UTC to ET timezone.]]></summary></entry><entry><title type="html">ddwrt</title><link href="http://0.0.0.0:4000/linux/2024/02/22/ddwrt.html" rel="alternate" type="text/html" title="ddwrt" /><published>2024-02-22T00:00:00+00:00</published><updated>2024-02-22T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/22/ddwrt</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/22/ddwrt.html"><![CDATA[<p>After a few weeks with OpenWRT, I decided to switch to DDWRT. Nothing wrong with OpenWRT other than DDWRT is much simpler.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="ddwrt" /><category term="router" /><summary type="html"><![CDATA[After a few weeks with OpenWRT, I decided to switch to DDWRT. Nothing wrong with OpenWRT other than DDWRT is much simpler.]]></summary></entry><entry><title type="html">brigthen</title><link href="http://0.0.0.0:4000/linux/2024/02/19/brigthen.html" rel="alternate" type="text/html" title="brigthen" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/brigthen</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/brigthen.html"><![CDATA[<p>A little Python script to brighten an image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import ImageEnhance, Image

def brightenImage(input_dir, output_dir):
    os.makedirs(output_dir, exist_ok=True)                                          # output directory
    for filename in os.listdir(input_dir):                                          # loop through files
        if filename.lower().endswith('.jpg'):                                       # check if jpg
            with Image.open(os.path.join(input_dir, filename)) as img:              # open jpg  
                enhanced_img = ImageEnhance.Contrast(img).enhance(1.25)             # enhance contrast
                enhanced_img = ImageEnhance.Brightness(enhanced_img).enhance(1.5)   # enhance brightness
                enhanced_img.save(os.path.join(output_dir, filename))               # save output

if __name__ == '__main__':
    input_directory = '.'                                                           # input directory
    output_directory = 'output'                                                     # output directory
    brightenImage(input_directory, output_directory)                                # brighten image
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="brigthen" /><category term="image" /><category term="jpg" /><summary type="html"><![CDATA[A little Python script to brighten an image.]]></summary></entry><entry><title type="html">enhance</title><link href="http://0.0.0.0:4000/linux/2024/02/19/enhance.html" rel="alternate" type="text/html" title="enhance" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/enhance</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/enhance.html"><![CDATA[<p>Here’s a litte Python script that enhance a jpg image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import ImageEnhance, Image

def enhance(input_dir, output_dir, factor=1.75):
    os.makedirs(output_dir, exist_ok=True)                                  # Create output directory   
    for filename in os.listdir(input_dir):                                  # Loop through all files
        if filename.lower().endswith('.jpg'):                               # Check if JPG image
            with Image.open(os.path.join(input_dir, filename)) as img:      # Open the image file
                enhanced_img = ImageEnhance.Color(img).enhance(factor)      # Enhance image
                enhanced_img.save(os.path.join(output_dir, filename))       # Save image

if __name__ == '__main__':
    input_directory = '.'                                                   # input directory
    output_directory = 'output'                                             # output directory
    enhance(input_directory, output_directory)                              # enhance
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="enhance" /><category term="jpg" /><summary type="html"><![CDATA[Here’s a litte Python script that enhance a jpg image.]]></summary></entry><entry><title type="html">resize</title><link href="http://0.0.0.0:4000/linux/2024/02/19/resize.html" rel="alternate" type="text/html" title="resize" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/resize</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/resize.html"><![CDATA[<p>Here’s a little Python script that creates thumbnails.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import Image

def resize(input_dir, output_dir, thumbnail_size=(720, 720)):               # set to 720p
    os.makedirs(output_dir, exist_ok=True)                                  # output directory 
    for filename in os.listdir(input_dir):                                  # loop through files 
        if filename.lower().endswith('.jpg'):                               # check if JPG
            with Image.open(os.path.join(input_dir, filename)) as img:      # open image
                img.thumbnail(thumbnail_size)                               # reduce to thumbnail
                img.save(os.path.join(output_dir, filename))                # save thumbnail

if __name__ == '__main__':
    input_directory = '.'                                                   # input directory
    output_directory = 'output'                                             # output directory
    resize(input_directory, output_directory)                               # resize images
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="python" /><category term="resize" /><category term="thumbnail" /><category term="images" /><category term="jpg" /><summary type="html"><![CDATA[Here’s a little Python script that creates thumbnails.]]></summary></entry><entry><title type="html">vintage</title><link href="http://0.0.0.0:4000/linux/2024/02/19/vintage.html" rel="alternate" type="text/html" title="vintage" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/vintage</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/vintage.html"><![CDATA[<p>Here’s a little Python script that makes vintage pictures.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import Image, ImageFilter, ImageOps, ImageEnhance

def vintage(input_dir, output_dir):
    os.makedirs(output_dir, exist_ok=True)                                  # output directory
    for filename in os.listdir(input_dir):                                  # Loop through files
        if filename.lower().endswith('.jpg'):                               # Check if JPG

            with Image.open(os.path.join(input_dir, filename)) as img:      # Open jpg
                img = img.convert("RGB")                                    # vintage effects
                img = ImageOps.grayscale(img)
                img = img.filter(ImageFilter.SMOOTH_MORE)
                img = ImageOps.posterize(img, 8)
                img = ImageEnhance.Contrast(img).enhance(1.4)
                img = ImageEnhance.Brightness(img).enhance(1.75)
                img = ImageOps.colorize(img, "#704214", "#eeeeee")
                img = ImageEnhance.Color(img).enhance(0.8)
                img.save(os.path.join(output_dir, filename))                # Save image

if __name__ == '__main__':
    input_directory = '.'                                                   # input directory
    output_directory = 'output'                                             # output directory
    vintage(input_directory, output_directory)                              # make vintage
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="python" /><category term="vintage" /><category term="jpg" /><category term="images" /><summary type="html"><![CDATA[Here’s a little Python script that makes vintage pictures.]]></summary></entry><entry><title type="html">white balance</title><link href="http://0.0.0.0:4000/linux/2024/02/19/white-balance.html" rel="alternate" type="text/html" title="white balance" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/19/white-balance</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/19/white-balance.html"><![CDATA[<p>Here’s a little Python script that corrects white balance.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import Image

def whiteBalance(input_dir, output_dir, red_ratio=1.0, blue_ratio=1.0):
    os.makedirs(output_dir, exist_ok=True)                                                          # output directory
    for filename in os.listdir(input_dir):                                                          # Loop through files
        if filename.lower().endswith(('.jpg', '.jpeg', '.png')):                                    # Check if image 
            with Image.open(os.path.join(input_dir, filename)) as img:                              # Open the image
                red_channel = img.getchannel('R')                                                   # wb correction
                green_channel = img.getchannel('G')
                blue_channel = img.getchannel('B')
                red_channel = red_channel.point(lambda p: min(int(p * red_ratio), 255))             # Adjust colors
                blue_channel = blue_channel.point(lambda p: min(int(p * blue_ratio), 255))
                corrected_img = Image.merge('RGB', (red_channel, green_channel, blue_channel))      # merge colors
                corrected_img.save(os.path.join(output_dir, filename))                              # Save image

if __name__ == '__main__':
    input_directory = '.'                                                                           # input directory
    output_directory = 'output'                                                                     # output directory
    red_ratio = 0.9                                                                                 # Adjust red 
    blue_ratio = 1.5                                                                                # Adjust blue
    whiteBalance(input_directory, output_directory, red_ratio, blue_ratio)                          # Correct wb
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="python" /><category term="white" /><category term="balance" /><summary type="html"><![CDATA[Here’s a little Python script that corrects white balance.]]></summary></entry><entry><title type="html">black and white</title><link href="http://0.0.0.0:4000/linux/2024/02/13/black-and-white.html" rel="alternate" type="text/html" title="black and white" /><published>2024-02-13T00:00:00+00:00</published><updated>2024-02-13T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/13/black-and-white</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/13/black-and-white.html"><![CDATA[<p>Here’s a Python code to convert JPG pictures to black and white.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
from PIL import Image

# black and white

def blackWhite(input_dir, output_dir):
    os.makedirs(output_dir, exist_ok=True)                                  # output directory
    for filename in os.listdir(input_dir):                                  # loop all files
        if filename.lower().endswith('.jpg'):                               # Check if JPG image
            with Image.open(os.path.join(input_dir, filename)) as img:      # Open image file
                bw_img = img.convert('L')                                   # Convert to bw
                bw_img.save(os.path.join(output_dir, filename))             # Save bw

if __name__ == '__main__':
    input_directory = '.'                                                   # input directory
    output_directory = 'output'                                             # output directory
    blackWhite(input_directory, output_directory)                           # conver to bw
</code></pre></div></div>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="python" /><category term="convert" /><category term="black" /><category term="white" /><summary type="html"><![CDATA[Here’s a Python code to convert JPG pictures to black and white.]]></summary></entry><entry><title type="html">nef to jpg</title><link href="http://0.0.0.0:4000/linux/2024/02/12/nef-to-jpg.html" rel="alternate" type="text/html" title="nef to jpg" /><published>2024-02-12T00:00:00+00:00</published><updated>2024-02-12T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/12/nef-to-jpg</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/12/nef-to-jpg.html"><![CDATA[<p>If you have a Nikon DSLR camera and you shoot in RAW format, you’ll end up with a NEF file. You can easily convert several NEF files to JPG by running a Python script. It’s fast and works fairly well. If you want to run in a controlled Python environment, I suggest that you create a virtual environment. You can group all your imaging scripts in one virtual environment.</p>

<p>Here’s the code to convert NEF files to JPG.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import glob
import rawpy
import imageio

def nef2jpg():

    directory = "."                                                     # set directory
    pathnef = glob.glob(f"{directory}/*.nef")                           # list of nef files
    pathNEF = glob.glob(f"{directory}/*.NEF")                           # list of NEF files
    count = 0
    number_files = len(pathnef) + len(pathNEF)
    print("Total Number of Images: ", number_files)

    for path in pathnef:
        with rawpy.imread(path) as raw:
            rgb = raw.postprocess()
            imageio.imwrite(path.replace('.nef', '') + '.jpg', rgb)     # convert nef to jpg
            count = count + 1
        print(count, '/', number_files)

    for path in pathNEF:
        with rawpy.imread(path) as raw:
            rgb = raw.postprocess()
            imageio.imwrite(path.replace('.NEF', '') + '.jpg', rgb)     # convert NEF to jpg
            count = count + 1
        print(count, '/', number_files)

if __name__ == '__main__':
    nef2jpg()
</code></pre></div></div>

<p>The script uses rawpy and imageio to convert files.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="convert" /><category term="nef" /><category term="to" /><category term="jpg" /><category term="python" /><summary type="html"><![CDATA[If you have a Nikon DSLR camera and you shoot in RAW format, you’ll end up with a NEF file. You can easily convert several NEF files to JPG by running a Python script. It’s fast and works fairly well. If you want to run in a controlled Python environment, I suggest that you create a virtual environment. You can group all your imaging scripts in one virtual environment.]]></summary></entry><entry><title type="html">oh my posh</title><link href="http://0.0.0.0:4000/linux/2024/02/11/oh-my-posh.html" rel="alternate" type="text/html" title="oh my posh" /><published>2024-02-11T00:00:00+00:00</published><updated>2024-02-11T00:00:00+00:00</updated><id>http://0.0.0.0:4000/linux/2024/02/11/oh-my-posh</id><content type="html" xml:base="http://0.0.0.0:4000/linux/2024/02/11/oh-my-posh.html"><![CDATA[<p>If you are too tired of using your Terminal’s default prompt, give this custom prompt engine program called <a href="https://ohmyposh.dev/">Oh My Posh</a> a try. It doesn’t matter which shell you are using whether you are using bash in Linux or zsh on a Mac, you can style it to your own liking. You’ll just have to learn a little bit of the custom oh-my-posh syntax, but it’s really not difficult to figure out once you get rolling. Browse several of the themes they have available on their site to get some fresh ideas. To help you decide which palette of colors to choose from, head over to <a href="https://www.canva.com/colors/color-palette-generator/">Canva.com’s</a> website and use the color palette combination they recommend. If you are curious, here’s my <a href="https://gist.github.com/ulyssesronquillo/d66cfea9a266692e40f4aa19b06ccf9c">prompt</a> setup. Check it out.</p>]]></content><author><name>ulysses</name></author><category term="linux" /><category term="custom" /><category term="prompt" /><category term="style" /><summary type="html"><![CDATA[If you are too tired of using your Terminal’s default prompt, give this custom prompt engine program called Oh My Posh a try. It doesn’t matter which shell you are using whether you are using bash in Linux or zsh on a Mac, you can style it to your own liking. You’ll just have to learn a little bit of the custom oh-my-posh syntax, but it’s really not difficult to figure out once you get rolling. Browse several of the themes they have available on their site to get some fresh ideas. To help you decide which palette of colors to choose from, head over to Canva.com’s website and use the color palette combination they recommend. If you are curious, here’s my prompt setup. Check it out.]]></summary></entry></feed>